<Project>
  <ItemGroup>
     <PackageReference Include="Microsoft.DotNet.SignTool" Version="$(MicrosoftDotNetSignToolVersion)" PrivateAssets="All"  />
  </ItemGroup>

  <!-- Import Arcade's Sign.props, when then imports the eng/Signing.props for this repo -->
  <Import Project="../tools/Sign.props" Sdk="Microsoft.DotNet.Arcade.Sdk" />

  <Target Name="SetSignProps"
          Condition="'$(SignCoreSdk)' == 'true'">

    <MakeDir Directories="$(ArtifactsTmpDir)" Condition="!Exists('$(ArtifactsTmpDir)')" />

    <!-- Logic copied from https://github.com/dotnet/arcade/blob/main/src/Microsoft.DotNet.Arcade.Sdk/tools/Sign.proj -->
    <Error Text="The value of DotNetSignType is invalid: '$(DotNetSignType)'"
       Condition="'$(DotNetSignType)' != 'real' and '$(DotNetSignType)' != 'test' and '$(DotNetSignType)' != ''" />

    <PropertyGroup>
      <_DryRun>true</_DryRun>
      <_DryRun Condition="'$(OfficialBuild)' == 'true'">false</_DryRun>

      <_TestSign>false</_TestSign>
      <_TestSign Condition="'$(DotNetSignType)' == 'test'">true</_TestSign>

      <_DesktopMSBuildRequired>false</_DesktopMSBuildRequired>
      <_DesktopMSBuildRequired Condition="'$(_DryRun)' != 'true' and '$(MSBuildRuntimeType)' == 'Core'">true</_DesktopMSBuildRequired>
    </PropertyGroup>

    <!-- We only need this if we are going to use the executable version. -->
    <Exec Command='"$(NuGetPackageRoot)vswhere\$(VSWhereVersion)\tools\vswhere.exe" -latest -prerelease -property installationPath -requires Microsoft.Component.MSBuild'
          ConsoleToMsBuild="true"
          StandardErrorImportance="high"
          Condition="$(_DesktopMSBuildRequired)">
      <Output TaskParameter="ConsoleOutput" PropertyName="_VSInstallDir" />
    </Exec>

    <PropertyGroup>
      <_DesktopMSBuildPath Condition="$(_DesktopMSBuildRequired)">$(_VSInstallDir)\MSBuild\15.0\Bin\msbuild.exe</_DesktopMSBuildPath>
    </PropertyGroup>
  </Target>

  <Target Name="SignLayout"
          Condition="'$(SignCoreSdk)' == 'true' and '$(PostBuildSign)' != 'true'"
          DependsOnTargets="SetSignProps">

    <ItemGroup>
      <LayoutFilesToSign Include="$(SdkOutputDirectory)**/csc.exe;
                                  $(SdkOutputDirectory)**/csc.dll;
                                  $(SdkOutputDirectory)**/VBCSCompiler.dll;
                                  $(SdkOutputDirectory)**/vbc.exe;
                                  $(SdkOutputDirectory)**/vbc.dll;
                                  $(SdkOutputDirectory)**/fsc.dll;
                                  $(SdkOutputDirectory)**/fsi.dll;
                                  $(SdkOutputDirectory)**/FSharp.*.dll;
                                  $(SdkOutputDirectory)**/Interactive.DependencyManager.dll;
                                  $(SdkOutputDirectory)**/dotnet.dll;
                                  $(SdkOutputDirectory)**/dotnet.resources.dll;
                                  $(SdkOutputDirectory)**/System.*.dll;
                                  $(SdkOutputDirectory)**/Microsoft.*.dll;
                                  $(SdkOutputDirectory)**/NuGet*.dll;
                                  $(SdkOutputDirectory)**/datacollector.dll;
                                  $(SdkOutputDirectory)**/datacollector.exe;
                                  $(SdkOutputDirectory)**/MSBuild.dll;
                                  $(SdkOutputDirectory)**/MSBuild.resources.dll;
                                  $(SdkOutputDirectory)**/PresentationBuildTasks.dll;
                                  $(SdkOutputDirectory)**/redist.dll;
                                  $(SdkOutputDirectory)**/rzc.dll;
                                  $(SdkOutputDirectory)**/testhost.dll;
                                  $(SdkOutputDirectory)**/testhost.exe;
                                  $(SdkOutputDirectory)**/testhost.x86.exe;
                                  $(SdkOutputDirectory)**/vstest.console.dll;
                                  $(SdkOutputDirectory)**/vstest.console.resources.dll;
                                  $(SdkOutputDirectory)**/Newtonsoft.Json.dll;
                                  $(SdkOutputDirectory)**/MessagePack.Annotations.dll;
                                  $(SdkOutputDirectory)**/MessagePack.dll;
                                  $(SdkOutputDirectory)**/Nerdbank.Streams.dll;
                                  $(SdkOutputDirectory)**/StreamJsonRpc.dll;
                                  $(SdkOutputDirectory)**/dotnet-watch*.dll;
                                  $(SdkOutputDirectory)**/DotNetWatchTasks.dll;" />
    </ItemGroup>

    <Error Condition="'$(AllowEmptySignList)' != 'true' AND '@(LayoutFilesToSign)' == ''"
           Text="List of files to sign is empty. Make sure that LayoutFilesToSign is configured correctly." />

    <Microsoft.DotNet.SignTool.SignToolTask
      DryRun="$(_DryRun)"
      TestSign="$(_TestSign)"
      CertificatesSignInfo="@(CertificatesSignInfo)"
      ItemsToSign="@(LayoutFilesToSign)"
      StrongNameSignInfo="@(StrongNameSignInfo)"
      FileSignInfo="@(FileSignInfo)"
      FileExtensionSignInfo="@(FileExtensionSignInfo)"
      TempDir="$(ArtifactsTmpDir)"
      LogDir="$(ArtifactsLogDir)"
      MSBuildPath="$(_DesktopMSBuildPath)"
      SNBinaryPath="$(NuGetPackageRoot)sn\$(SNVersion)\sn.exe"
      MicroBuildCorePath="$(NuGetPackageRoot)microbuild.core\$(MicroBuildCoreVersion)"/>

  </Target>

  <Target Name="SignSdkMsi"
        Condition="'$(SignCoreSdk)' == 'true' and '$(PostBuildSign)' != 'true'"
        DependsOnTargets="SetSignProps">

    <ItemGroup>
      <SdkMsiFilesToSign Include="$(SdkMSIInstallerFile)" />
    </ItemGroup>

    <Microsoft.DotNet.SignTool.SignToolTask
        DryRun="$(_DryRun)"
        TestSign="$(_TestSign)"
        CertificatesSignInfo="@(CertificatesSignInfo)"
        ItemsToSign="@(SdkMsiFilesToSign)"
        StrongNameSignInfo="@(StrongNameSignInfo)"
        FileSignInfo="@(FileSignInfo)"
        FileExtensionSignInfo="@(FileExtensionSignInfo)"
        TempDir="$(ArtifactsTmpDir)"
        LogDir="$(ArtifactsLogDir)"
        MSBuildPath="$(_DesktopMSBuildPath)"
        SNBinaryPath="$(NuGetPackageRoot)sn\$(SNVersion)\sn.exe"
        MicroBuildCorePath="$(NuGetPackageRoot)microbuild.core\$(MicroBuildCoreVersion)"/>

  </Target>

  <Target Name="SignTemplatesMsis"
      Condition="'$(SignCoreSdk)' == 'true' and '$(PostBuildSign)' != 'true'"
      DependsOnTargets="SetSignProps;SetupTemplatesMsis">

    <ItemGroup>
      <TemplatesMsiFilesToSign Include="@(TemplatesMsiComponent->'%(MSIInstallerFile)')" />
    </ItemGroup>

    <Microsoft.DotNet.SignTool.SignToolTask
        DryRun="$(_DryRun)"
        TestSign="$(_TestSign)"
        CertificatesSignInfo="@(CertificatesSignInfo)"
        ItemsToSign="@(TemplatesMsiFilesToSign)"
        StrongNameSignInfo="@(StrongNameSignInfo)"
        FileSignInfo="@(FileSignInfo)"
        FileExtensionSignInfo="@(FileExtensionSignInfo)"
        TempDir="$(ArtifactsTmpDir)"
        LogDir="$(ArtifactsLogDir)"
        MSBuildPath="$(_DesktopMSBuildPath)"
        SNBinaryPath="$(NuGetPackageRoot)sn\$(SNVersion)\sn.exe"
        MicroBuildCorePath="$(NuGetPackageRoot)microbuild.core\$(MicroBuildCoreVersion)"/>

  </Target>

  <Target Name="SignSdkBundle"
      Condition="'$(SignCoreSdk)' == 'true' and '$(PostBuildSign)' != 'true'"
      DependsOnTargets="SetSignProps">

    <!-- Extract engine from bundle -->
    <Exec Command="$(WixRoot)/insignia.exe -ib $(CombinedFrameworkSdkHostMSIInstallerFile) -o $(CombinedFrameworkSdkHostBundleEngineName)" />

    <!-- Sign engine-->
    <ItemGroup>
      <EngineFileToSign Include="$(CombinedFrameworkSdkHostBundleEngineName)" />
    </ItemGroup>
    <Microsoft.DotNet.SignTool.SignToolTask
        DryRun="$(_DryRun)"
        TestSign="$(_TestSign)"
        CertificatesSignInfo="@(CertificatesSignInfo)"
        ItemsToSign="@(EngineFileToSign)"
        StrongNameSignInfo="@(StrongNameSignInfo)"
        FileSignInfo="@(FileSignInfo)"
        FileExtensionSignInfo="@(FileExtensionSignInfo)"
        TempDir="$(ArtifactsTmpDir)"
        LogDir="$(ArtifactsLogDir)"
        MSBuildPath="$(_DesktopMSBuildPath)"
        SNBinaryPath="$(NuGetPackageRoot)sn\$(SNVersion)\sn.exe"
        MicroBuildCorePath="$(NuGetPackageRoot)microbuild.core\$(MicroBuildCoreVersion)"/>

    <!-- Reattach engine to bundle -->
    <Exec Command="$(WixRoot)/insignia.exe -ab $(CombinedFrameworkSdkHostBundleEngineName) $(CombinedFrameworkSdkHostMSIInstallerFile) -o $(CombinedFrameworkSdkHostMSIInstallerFile)" />

    <!-- Sign bundle -->
    <ItemGroup>
      <BundleFileToSign Include="$(CombinedFrameworkSdkHostMSIInstallerFile)" />
    </ItemGroup>

    <Microsoft.DotNet.SignTool.SignToolTask
        DryRun="$(_DryRun)"
        TestSign="$(_TestSign)"
        CertificatesSignInfo="@(CertificatesSignInfo)"
        ItemsToSign="@(BundleFileToSign)"
        StrongNameSignInfo="@(StrongNameSignInfo)"
        FileSignInfo="@(FileSignInfo)"
        FileExtensionSignInfo="@(FileExtensionSignInfo)"
        TempDir="$(ArtifactsTmpDir)"
        LogDir="$(ArtifactsLogDir)"
        MSBuildPath="$(_DesktopMSBuildPath)"
        SNBinaryPath="$(NuGetPackageRoot)sn\$(SNVersion)\sn.exe"
        MicroBuildCorePath="$(NuGetPackageRoot)microbuild.core\$(MicroBuildCoreVersion)"/>

  </Target>

  <Target Name="SignSdkPlaceholderMsi"
      Condition="'$(SignCoreSdk)' == 'true' and '$(PostBuildSign)' != 'true'"
      DependsOnTargets="SetSignProps">

    <ItemGroup>
      <SdkPlaceholderMsiFilesToSign Include="$(SdkPlaceholderMSIInstallerFile)" />
    </ItemGroup>

    <Microsoft.DotNet.SignTool.SignToolTask
        DryRun="$(_DryRun)"
        TestSign="$(_TestSign)"
        CertificatesSignInfo="@(CertificatesSignInfo)"
        ItemsToSign="@(SdkPlaceholderMsiFilesToSign)"
        StrongNameSignInfo="@(StrongNameSignInfo)"
        FileSignInfo="@(FileSignInfo)"
        FileExtensionSignInfo="@(FileExtensionSignInfo)"
        TempDir="$(ArtifactsTmpDir)"
        LogDir="$(ArtifactsLogDir)"
        MSBuildPath="$(_DesktopMSBuildPath)"
        SNBinaryPath="$(NuGetPackageRoot)sn\$(SNVersion)\sn.exe"
        MicroBuildCorePath="$(NuGetPackageRoot)microbuild.core\$(MicroBuildCoreVersion)"/>

  </Target>

</Project>
