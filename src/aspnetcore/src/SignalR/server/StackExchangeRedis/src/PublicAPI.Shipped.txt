#nullable enable
~Microsoft.AspNetCore.SignalR.StackExchangeRedis.RedisHubLifetimeManager<THub>
~Microsoft.AspNetCore.SignalR.StackExchangeRedis.RedisHubLifetimeManager<THub>.RedisHubLifetimeManager(Microsoft.Extensions.Logging.ILogger<Microsoft.AspNetCore.SignalR.StackExchangeRedis.RedisHubLifetimeManager<THub!>!>! logger, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.SignalR.StackExchangeRedis.RedisOptions!>! options, Microsoft.AspNetCore.SignalR.IHubProtocolResolver! hubProtocolResolver) -> void
~Microsoft.AspNetCore.SignalR.StackExchangeRedis.RedisHubLifetimeManager<THub>.RedisHubLifetimeManager(Microsoft.Extensions.Logging.ILogger<Microsoft.AspNetCore.SignalR.StackExchangeRedis.RedisHubLifetimeManager<THub!>!>! logger, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.SignalR.StackExchangeRedis.RedisOptions!>! options, Microsoft.AspNetCore.SignalR.IHubProtocolResolver! hubProtocolResolver, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.SignalR.HubOptions!>? globalHubOptions, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.SignalR.HubOptions<THub!>!>? hubOptions) -> void
Microsoft.AspNetCore.SignalR.StackExchangeRedis.RedisHubLifetimeManager<THub>.Dispose() -> void
Microsoft.AspNetCore.SignalR.StackExchangeRedis.RedisOptions
Microsoft.AspNetCore.SignalR.StackExchangeRedis.RedisOptions.Configuration.get -> StackExchange.Redis.ConfigurationOptions!
Microsoft.AspNetCore.SignalR.StackExchangeRedis.RedisOptions.Configuration.set -> void
Microsoft.AspNetCore.SignalR.StackExchangeRedis.RedisOptions.ConnectionFactory.get -> System.Func<System.IO.TextWriter!, System.Threading.Tasks.Task<StackExchange.Redis.IConnectionMultiplexer!>!>?
Microsoft.AspNetCore.SignalR.StackExchangeRedis.RedisOptions.ConnectionFactory.set -> void
Microsoft.AspNetCore.SignalR.StackExchangeRedis.RedisOptions.RedisOptions() -> void
Microsoft.Extensions.DependencyInjection.StackExchangeRedisDependencyInjectionExtensions
override Microsoft.AspNetCore.SignalR.StackExchangeRedis.RedisHubLifetimeManager<THub>.AddToGroupAsync(string! connectionId, string! groupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
override Microsoft.AspNetCore.SignalR.StackExchangeRedis.RedisHubLifetimeManager<THub>.OnConnectedAsync(Microsoft.AspNetCore.SignalR.HubConnectionContext! connection) -> System.Threading.Tasks.Task!
override Microsoft.AspNetCore.SignalR.StackExchangeRedis.RedisHubLifetimeManager<THub>.OnDisconnectedAsync(Microsoft.AspNetCore.SignalR.HubConnectionContext! connection) -> System.Threading.Tasks.Task!
override Microsoft.AspNetCore.SignalR.StackExchangeRedis.RedisHubLifetimeManager<THub>.RemoveFromGroupAsync(string! connectionId, string! groupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
override Microsoft.AspNetCore.SignalR.StackExchangeRedis.RedisHubLifetimeManager<THub>.SendAllAsync(string! methodName, object?[]! args, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
override Microsoft.AspNetCore.SignalR.StackExchangeRedis.RedisHubLifetimeManager<THub>.SendAllExceptAsync(string! methodName, object?[]! args, System.Collections.Generic.IReadOnlyList<string!>! excludedConnectionIds, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
override Microsoft.AspNetCore.SignalR.StackExchangeRedis.RedisHubLifetimeManager<THub>.SendConnectionAsync(string! connectionId, string! methodName, object?[]! args, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
override Microsoft.AspNetCore.SignalR.StackExchangeRedis.RedisHubLifetimeManager<THub>.SendConnectionsAsync(System.Collections.Generic.IReadOnlyList<string!>! connectionIds, string! methodName, object?[]! args, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
override Microsoft.AspNetCore.SignalR.StackExchangeRedis.RedisHubLifetimeManager<THub>.SendGroupAsync(string! groupName, string! methodName, object?[]! args, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
override Microsoft.AspNetCore.SignalR.StackExchangeRedis.RedisHubLifetimeManager<THub>.SendGroupExceptAsync(string! groupName, string! methodName, object?[]! args, System.Collections.Generic.IReadOnlyList<string!>! excludedConnectionIds, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
override Microsoft.AspNetCore.SignalR.StackExchangeRedis.RedisHubLifetimeManager<THub>.SendGroupsAsync(System.Collections.Generic.IReadOnlyList<string!>! groupNames, string! methodName, object?[]! args, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
override Microsoft.AspNetCore.SignalR.StackExchangeRedis.RedisHubLifetimeManager<THub>.SendUserAsync(string! userId, string! methodName, object?[]! args, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
override Microsoft.AspNetCore.SignalR.StackExchangeRedis.RedisHubLifetimeManager<THub>.SendUsersAsync(System.Collections.Generic.IReadOnlyList<string!>! userIds, string! methodName, object?[]! args, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
static Microsoft.Extensions.DependencyInjection.StackExchangeRedisDependencyInjectionExtensions.AddStackExchangeRedis(this Microsoft.AspNetCore.SignalR.ISignalRServerBuilder! signalrBuilder) -> Microsoft.AspNetCore.SignalR.ISignalRServerBuilder!
static Microsoft.Extensions.DependencyInjection.StackExchangeRedisDependencyInjectionExtensions.AddStackExchangeRedis(this Microsoft.AspNetCore.SignalR.ISignalRServerBuilder! signalrBuilder, string! redisConnectionString) -> Microsoft.AspNetCore.SignalR.ISignalRServerBuilder!
static Microsoft.Extensions.DependencyInjection.StackExchangeRedisDependencyInjectionExtensions.AddStackExchangeRedis(this Microsoft.AspNetCore.SignalR.ISignalRServerBuilder! signalrBuilder, string! redisConnectionString, System.Action<Microsoft.AspNetCore.SignalR.StackExchangeRedis.RedisOptions!>! configure) -> Microsoft.AspNetCore.SignalR.ISignalRServerBuilder!
static Microsoft.Extensions.DependencyInjection.StackExchangeRedisDependencyInjectionExtensions.AddStackExchangeRedis(this Microsoft.AspNetCore.SignalR.ISignalRServerBuilder! signalrBuilder, System.Action<Microsoft.AspNetCore.SignalR.StackExchangeRedis.RedisOptions!>! configure) -> Microsoft.AspNetCore.SignalR.ISignalRServerBuilder!
