<Project>
  <Import Project="Sdk.props" Sdk="Microsoft.NET.Sdk" />

  <PropertyGroup>
    <TargetFramework>$(DefaultNetCoreTargetFramework)</TargetFramework>
    <RuntimeIdentifier>$(TargetRuntimeIdentifier)</RuntimeIdentifier>
    <!-- Even though RuntimeIdentifier is set, shared framework projects are not self-contained projects -->
    <SelfContained>false</SelfContained>
    <PackageId>$(MSBuildProjectName).$(RuntimeIdentifier)</PackageId>
    <!-- Do not exclude this project from source build -->
    <ExcludeFromSourceBuild>false</ExcludeFromSourceBuild>
    <PackageDescription>Provides a default set of APIs for building an ASP.NET Core application. Contains assets used for self-contained deployments.

This package is an internal implementation of the .NET Core SDK and is not meant to be used as a normal PackageReference.
    </PackageDescription>
    <PackageTags>aspnetcore;shared-framework</PackageTags>
    <SuppressDependenciesWhenPacking>true</SuppressDependenciesWhenPacking>
    <!-- There is a ref directory next to this project but it's not auto generated, disable the guardrails -->
    <SkipRefDirectoryCheck>true</SkipRefDirectoryCheck>
    <PackageType>DotnetPlatform</PackageType>

    <!-- This file is used by the dotnet/core-sdk repo to determine if the version of AspNetCore.App is coherent with Microsoft.NETCore.App. -->
    <BaseRuntimeVersionFileName>aspnetcore_base_runtime.version</BaseRuntimeVersionFileName>
    <BaseRuntimeVersionFileOutputPath>$(InstallersOutputPath)$(BaseRuntimeVersionFileName)</BaseRuntimeVersionFileOutputPath>

    <!-- NuGet appends target framework to this value. Example: runtimes/win-x64/lib/netcoreappX.Y/ -->
    <BuildOutputTargetFolder>runtimes/$(RuntimeIdentifier)/lib/</BuildOutputTargetFolder>
    <!-- We still need the native path to these assets though for the RuntimeList.xml manifest -->
    <ManagedAssetsPackagePath>$(BuildOutputTargetFolder)$(DefaultNetCoreTargetFramework)</ManagedAssetsPackagePath>
    <!-- Target framework is not appended to this because native assets do not have a target framework. -->
    <NativeAssetsPackagePath>runtimes/$(RuntimeIdentifier)/native/</NativeAssetsPackagePath>

    <!-- Use the BrowserDebugHost as a sentinel for the nonshipping version for .NETCoreApp -->
    <DotNetRuntimeArchiveFileName>dotnet-runtime-$(MicrosoftNETCoreAppRuntimeVersion)-$(TargetRuntimeIdentifier)$(ArchiveExtension)</DotNetRuntimeArchiveFileName>
    <DotNetRuntimeDownloadUrl>$(DotNetAssetRootUrl)Runtime/$(MicrosoftNETCoreBrowserDebugHostTransportVersion)/$(DotNetRuntimeArchiveFileName)</DotNetRuntimeDownloadUrl>
    <DotNetRuntimePrivateDownloadUrl>$(DotNetPrivateAssetRootUrl)Runtime/$(MicrosoftNETCoreBrowserDebugHostTransportVersion)/$(DotNetRuntimeArchiveFileName)</DotNetRuntimePrivateDownloadUrl>
    <DotNetRuntimeArchive>$(BaseIntermediateOutputPath)$(DotNetRuntimeArchiveFileName)</DotNetRuntimeArchive>

    <!-- Setting this suppresses getting documentation .xml files in the shared runtime output. -->
    <AllowedReferenceRelatedFileExtensions>.pdb</AllowedReferenceRelatedFileExtensions>

    <!-- Pack .ni.r2rmap files in symbols package (native symbols for Linux) -->
    <AllowedOutputExtensionsInSymbolsPackageBuildOutputFolder>$(AllowedOutputExtensionsInSymbolsPackageBuildOutputFolder);.r2rmap</AllowedOutputExtensionsInSymbolsPackageBuildOutputFolder>

    <!-- Optimize the framework using the crossgen2 tool. Crossgen2 is not currently supported on s390x. -->
    <CrossgenOutput Condition=" '$(TargetArchitecture)' == 's390x' ">false</CrossgenOutput>
    <CrossgenOutput Condition=" '$(CrossgenOutput)' == '' AND '$(Configuration)' != 'Debug' ">true</CrossgenOutput>

    <!-- Produce crossgen2 profiling symbols (.ni.pdb or .r2rmap files). -->
    <GenerateCrossgenProfilingSymbols>true</GenerateCrossgenProfilingSymbols>
    <GenerateCrossgenProfilingSymbols Condition=" '$(CrossgenOutput)' != 'true' OR '$(TargetOsName)' == 'osx' ">false</GenerateCrossgenProfilingSymbols>

    <!-- Always generated, even though output type == Library -->
    <GenerateRuntimeConfigurationFiles>true</GenerateRuntimeConfigurationFiles>
    <ProjectRuntimeConfigFileName>$(SharedFxName).runtimeconfig.json</ProjectRuntimeConfigFileName>
    <!-- Target the latest runtime patch so the latest version is specified in runtimeconfig.json -->
    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>

    <!-- Suppress .deps generation because we have to customize its layout. -->
    <GenerateDependencyFile>false</GenerateDependencyFile>
    <ProjectDepsFileName>$(SharedFxName).deps.json</ProjectDepsFileName>

    <!-- There is no way to suppress .dev.runtimeconfig.json generation. Rename it to exclude it from the package. -->
    <ProjectRuntimeConfigDevFilePath>$(IntermediateOutputPath)ignoreme.dev.runtimeconfig.json</ProjectRuntimeConfigDevFilePath>

    <VersionTxtFileIntermediateOutputPath>$(IntermediateOutputPath)$(SharedFxName).versions.txt</VersionTxtFileIntermediateOutputPath>
    <DotVersionFileIntermediateOutputPath>$(IntermediateOutputPath).version</DotVersionFileIntermediateOutputPath>

    <!-- The project representing the shared framework doesn't produce a .NET assembly or symbols. -->
    <DebugType>none</DebugType>
    <CopyBuildOutputToPublishDirectory>false</CopyBuildOutputToPublishDirectory>
    <CopyBuildOutputToOutputDirectory>false</CopyBuildOutputToOutputDirectory>
    <CopyOutputSymbolsToOutputDirectory>false</CopyOutputSymbolsToOutputDirectory>

    <!-- Copy assets to output path from NuGet packages. -->
    <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>

    <!-- Workaround for the way Microsoft.AspNetCore.Server.IIS.csproj references ANCM native deps. Do not copy content from ProjectReference's CopyToOutput items.  -->
    <_GetChildProjectCopyToOutputDirectoryItems>false</_GetChildProjectCopyToOutputDirectoryItems>

    <!-- This project should not be referenced via the `<Reference>` implementation. -->
    <IsProjectReferenceProvider>false</IsProjectReferenceProvider>

    <!-- Properties related to crossgen2 -->
    <CrossGenSymbolsType>PerfMap</CrossGenSymbolsType>
    <CrossGenSymbolsType Condition="'$(TargetOsName)' == 'win'">PDB</CrossGenSymbolsType>

    <!--
      hostfxr and hostpolicy libraries are named libhostfxr.so and libhostpolicy.so in non-Windows
      microsoft.netcore.app.runtime packages.
    -->
    <LibPrefix Condition=" '$(TargetOsName)' != 'win' ">lib</LibPrefix>

    <!-- crossgen2 executable name -->
    <Crossgen2ToolFileName>crossgen2</Crossgen2ToolFileName>
    <Crossgen2ToolFileName Condition=" '$(TargetOsName)' == 'win' ">$(Crossgen2ToolFileName).exe</Crossgen2ToolFileName>

    <!-- E.g. "PkgMicrosoft_NETCore_App_Runtime_win-x64" (set in obj/Microsoft.AspNetCore.App.Runtime.csproj.nuget.g.props). -->
    <RuntimePackageRootVariableName>PkgMicrosoft_NETCore_App_Runtime_$(RuntimeIdentifier)</RuntimePackageRootVariableName>

    <!--
      Determine the crossgen2 package path property name. Special case linux-musl-arm and linux-musl-arm64 because they
      are built on an Ubuntu container with cross compilation tools. linux-musl-x64 is built in an alpine container.
      Special case the crossgen2 package reference on Windows to avoid the x86 package when building in Visual Studio.
    -->
    <BuildOsName>$(TargetOsName)</BuildOsName>
    <BuildOsName Condition="'$(TargetOsName)' == 'linux-musl' and '$(TargetArchitecture)'!='x64'">linux</BuildOsName>
    <Crossgen2BuildArchitecture Condition=" '$(BuildOsName)' == 'win' ">x64</Crossgen2BuildArchitecture>
    <Crossgen2BuildArchitecture Condition=" '$(Crossgen2BuildArchitecture)' == '' ">$(BuildArchitecture)</Crossgen2BuildArchitecture>
    <Crossgen2PackageRootVariableName>PkgMicrosoft_NETCore_App_Crossgen2_$(BuildOsName)-$(Crossgen2BuildArchitecture)</Crossgen2PackageRootVariableName>

    <AssetTargetFallback>$(AssetTargetFallback);native,Version=0.0</AssetTargetFallback>

    <NativePlatform>$(TargetArchitecture)</NativePlatform>
    <NativePlatform Condition=" '$(NativePlatform)' == 'x86' ">Win32</NativePlatform>
  </PropertyGroup>

  <ItemGroup>
    <!-- Note: do not add _TransitiveExternalAspNetCoreAppReference to this list. This is intentionally not listed as a direct package reference. -->
    <Reference Include="@(AspNetCoreAppReference);@(AspNetCoreAppReferenceAndPackage);@(ExternalAspNetCoreAppReference)">
      <IncludeAssets>Runtime;Native</IncludeAssets>
    </Reference>

    <Reference Condition="'$(CrossgenOutput)' == 'true'"
        Include="Microsoft.NETCore.App.Runtime.$(RuntimeIdentifier)"
        ExcludeAssets="All"
        PrivateAssets="All"
        GeneratePathProperty="true" />

    <!--
      This package contains the crossgen2 tool. Unfortunately, it doesn't make the tool easy to use.
      $(GeneratePathProperty) and hacks in the _ExpandRuntimePackageRoot target work around the gaps.
    -->
    <Reference Condition="'$(CrossgenOutput)' == 'true'"
        Include="Microsoft.NETCore.App.Crossgen2.$(BuildOsName)-$(Crossgen2BuildArchitecture)"
        ExcludeAssets="All"
        PrivateAssets="All"
        GeneratePathProperty="true" />

    <ProjectReference Condition=" '$(BuildIisNativeProjects)' == 'true' AND $(BuildNative) "
        Include="$(RepoRoot)src\Servers\IIS\AspNetCoreModuleV2\InProcessRequestHandler\InProcessRequestHandler.vcxproj">
      <SetPlatform>Platform=$(NativePlatform)</SetPlatform>
      <!-- Custom attribute used to distinguish managed from native references. -->
      <IsNativeImage>true</IsNativeImage>
      <!-- A custom item group to be used in targets later.  -->
      <OutputItemType>_ResolvedNativeProjectReferencePaths</OutputItemType>
      <!-- C++ projects don't invoke GetTargetPath by default when building. -->
      <Targets>Build;GetTargetPath</Targets>
    </ProjectReference>

    <_ResolvedNativeProjectReferencePaths Condition=" '$(BuildIisNativeProjects)' == 'true' AND !$(BuildNative) "
        Include="$(ArtifactsBinDir)InProcessRequestHandler\$(NativePlatform)\$(Configuration)\aspnetcorev2_inprocess.dll">
      <IsNativeImage>true</IsNativeImage>
    </_ResolvedNativeProjectReferencePaths>
  </ItemGroup>

  <ItemGroup>
    <GenerateRuntimeConfigurationFilesInputs Include="$(MSBuildAllProjects)" />
  </ItemGroup>

  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" />

  <PropertyGroup>
    <SharedRuntimeSubPath>shared\$(SharedFxName)\$(SharedFxVersion)\</SharedRuntimeSubPath>
    <SharedFxLayoutTargetDir>$(SharedFrameworkLayoutRoot)$(SharedRuntimeSubPath)</SharedFxLayoutTargetDir>
    <RedistLayoutTargetDir>$(RedistSharedFrameworkLayoutRoot)$(SharedRuntimeSubPath)</RedistLayoutTargetDir>
    <LocalInstallationOutputPath>$(LocalDotNetRoot)$(SharedRuntimeSubPath)</LocalInstallationOutputPath>

    <FrameworkListFileName>RuntimeList.xml</FrameworkListFileName>
    <FrameworkListOutputPath>$(ArtifactsObjDir)$(FrameworkListFileName)</FrameworkListOutputPath>

    <InternalArchiveOutputFileName>$(InternalInstallerBaseName)-$(PackageVersion)-$(TargetRuntimeIdentifier)$(ArchiveExtension)</InternalArchiveOutputFileName>
    <InternalArchiveOutputPath>$(InstallersOutputPath)$(InternalArchiveOutputFileName)</InternalArchiveOutputPath>
    <RedistArchiveOutputFileName>$(RuntimeInstallerBaseName)-$(PackageVersion)-$(TargetRuntimeIdentifier)$(ArchiveExtension)</RedistArchiveOutputFileName>
    <RedistArchiveOutputPath>$(InstallersOutputPath)$(RedistArchiveOutputFileName)</RedistArchiveOutputPath>
  </PropertyGroup>

  <!-- Target chain -->
  <PropertyGroup>
    <ResolveReferencesDependsOn>
      $(ResolveReferencesDependsOn);
      FilterUnwantedContent;
      _ResolveCopyLocalNativeReference;
      PrepareForCrossGen;
    </ResolveReferencesDependsOn>
    <CoreBuildDependsOn>
      $(CoreBuildDependsOn);
      GenerateSharedFxDepsFile;
      GenerateSharedFxVersionsFiles;
      Crossgen;
      IncludeFrameworkListFile;
      _ResolveSharedFrameworkContent;
      _InstallFrameworkIntoLocalDotNet;
      _DownloadAndExtractDotNetRuntime;
      _BatchCopyToSharedFrameworkLayout;
      _BatchCopyToRedistLayout;
      _CreateInternalSharedFxArchive;
      _CreateRedistSharedFxArchive;
    </CoreBuildDependsOn>
    <CrossGenDependsOn>
      ResolveReferences;
    </CrossGenDependsOn>
    <CrossGenDependsOn Condition=" '$(CrossgenOutput)' == 'true' ">
      $(CrossGenDependsOn);
      _BatchCrossGenAssemblies;
    </CrossGenDependsOn>
    <TargetsForTfmSpecificBuildOutput>
      $(TargetsForTfmSpecificBuildOutput);
      _ResolveRuntimePackBuildOutput
    </TargetsForTfmSpecificBuildOutput>
  </PropertyGroup>

  <!-- Override the default MSBuild targets so that nothing is returned from the project since it represents a collection of assemblies. -->
  <Target Name="GetTargetPath" />
  <Target Name="Build" DependsOnTargets="$(BuildDependsOn)">
    <Message Importance="High" Text="$(MSBuildProjectName) -> $(TargetDir)" />
  </Target>

  <!-- There is no Microsoft.AspNetCore.App.Runtime.dll file. Clear the default value from the build output group. -->
  <ItemGroup>
    <BuiltProjectOutputGroupKeyOutput Remove="@(BuiltProjectOutputGroupKeyOutput)" />
  </ItemGroup>

  <!-- This project doesn't compile anything. -->
  <Target Name="CoreCompile" />

  <Target Name="FilterUnwantedContent">
    <ItemGroup>
      <!-- These files end up in this item group as a result of setting CopyLocalLockFileAssemblies, but shouldn't be. -->
      <ReferenceCopyLocalPaths Remove="@(ReferenceCopyLocalPaths)" Condition="'%(FileName)' == 'apphost' OR '%(FileName)' == '$(LibPrefix)hostfxr' OR '%(FileName)' == '$(LibPrefix)hostpolicy' "/>
    </ItemGroup>
  </Target>

  <Target Name="_WarnAboutUnbuiltNativeDependencies"
          BeforeTargets="Build"
          Condition=" '$(BuildIisNativeProjects)' == 'true' AND !$(BuildNative) AND
              !EXISTS('$(ArtifactsBinDir)InProcessRequestHandler\$(NativePlatform)\$(Configuration)\aspnetcorev2_inprocess.dll') ">
    <Warning Text="This project has native dependencies which were not built. Without this, tests may not function correctly. Run `build.cmd -BuildNative -BuildManaged` to build both C# and C++." />
  </Target>

  <Target Name="_ResolveCopyLocalNativeReference" DependsOnTargets="ResolveProjectReferences">
    <ItemGroup>
      <ReferenceCopyLocalPaths Include="@(_ResolvedNativeProjectReferencePaths)" />
      <ReferenceCopyLocalPaths Include="@(_ResolvedNativeProjectReferencePaths->'%(RootDir)%(Directory)%(FileName).pdb')" />
    </ItemGroup>
  </Target>

  <Target Name="GenerateSharedFxDepsFile"
          DependsOnTargets="ResolveReferences;CrossGen"
          Inputs="@(ReferenceCopyLocalPaths);$(_RepoTaskAssembly);$(ProjectAssetsFile);$(MSBuildAllProjects)"
          Outputs="$(ProjectDepsFilePath)">

    <ItemGroup>
      <_RuntimeReference Include="@(ReferenceCopyLocalPaths)" Condition="'%(ReferenceCopyLocalPaths.Extension)' != '.pdb' AND '%(ReferenceCopyLocalPaths.Extension)' != '.r2rmap'" />
    </ItemGroup>

    <RepoTasks.GenerateSharedFrameworkDepsFile
      DepsFilePath="$(ProjectDepsFilePath)"
      TargetFramework="$(TargetFrameworkMoniker)"
      FrameworkName="$(TargetingPackName)"
      FrameworkVersion="$(SharedFxVersion)"
      References="@(_RuntimeReference)"
      RuntimeIdentifier="$(RuntimeIdentifier)"
      RuntimePackageName="$(PackageId)"
      PlatformManifestOutputPath="$(PlatformManifestOutputPath)" />
  </Target>

  <!--
    Generate the .version, aspnetcore_base_runtime.version and Microsoft.AspNetCore.App.versions.txt files in the
    shared framework.
  -->
  <Target Name="GenerateSharedFxVersionsFiles" DependsOnTargets="InitializeSourceControlInformation">
    <WriteLinesToFile
      File="$(BaseRuntimeVersionFileOutputPath)"
      Lines="$(MicrosoftNETCoreAppRuntimeVersion)"
      Overwrite="true" />

    <ItemGroup>
      <VersionLines Include="$(SourceRevisionId)" />
      <VersionLines Include="$(SharedFxVersion)" />
    </ItemGroup>

    <WriteLinesToFile
      File="$(VersionTxtFileIntermediateOutputPath)"
      Lines="@(VersionLines)"
      Overwrite="true" />

    <WriteLinesToFile
      File="$(DotVersionFileIntermediateOutputPath)"
      Lines="@(VersionLines)"
      Overwrite="true" />
  </Target>

  <!-- This target resolves files into the BuiltProjectOutputGroupOutput which NuGet uses to generate the package files. -->
  <Target Name="_ResolveRuntimePackBuildOutput" DependsOnTargets="ResolveReferences;Crossgen">
    <ItemGroup>
      <BuildOutputFiles Include="$(ProjectDepsFilePath)" />
      <BuildOutputFiles Include="@(ReferenceCopyLocalPaths)" Condition=" '%(ReferenceCopyLocalPaths.IsNativeImage)' != 'true' " />
      <!-- Include all .pdbs in build output. Some .pdb files are part of ReferenceCopyLocalPaths, but this can change when running /t:Pack /p:NoBuild=true. -->
      <BuildOutputFiles Include="$(TargetDir)*.pdb" Exclude="@(ReferenceCopyLocalPaths)" />
      <!-- crossgen2 symbols for Linux include a GUID in the file name which cannot be predicted. -->
      <BuildOutputFiles Include="$(TargetDir)*.r2rmap" Condition="'$(CrossGenSymbolsType)' == 'PerfMap'" />

      <!-- Strip duplicate Files by checking for distinct %(FileName)%(Extension) -->
      <OutputFileNames Include="%(BuildOutputFiles.FileName)%(BuildOutputFiles.Extension)">
        <ItemPath>%(BuildOutputFiles.Identity)</ItemPath>
      </OutputFileNames>
      <DistinctOutputFileNames Include="@(OutputFileNames->Distinct())"></DistinctOutputFileNames>

      <!--BuiltProjectOutputGroupOuput is the item actually used by Nuget -->
      <BuiltProjectOutputGroupOutput Include="%(DistinctOutputFileNames.ItemPath)" />
      <NuGetPackInput Include="@(BuiltProjectOutputGroupOutput)" />
    </ItemGroup>
  </Target>

  <Target Name="_ResolveNativePackContent"
          BeforeTargets="_GetPackageFiles;GenerateNuspec"
          DependsOnTargets="ResolveReferences">
    <ItemGroup>
      <!-- Native files are included in _PackageFile instead because they belong in a separate package folder. -->
      <Content Include="@(ReferenceCopyLocalPaths)" PackagePath="$(NativeAssetsPackagePath)"
          Condition=" '%(ReferenceCopyLocalPaths.IsNativeImage)' == 'true' AND '%(ReferenceCopyLocalPaths.Extension)' != '.pdb' " />
    </ItemGroup>
  </Target>

  <Target Name="_ResolveRuntimePackContent"
          BeforeTargets="_GetPackageFiles"
          DependsOnTargets="GenerateSharedFxDepsFile">
    <ItemGroup>
      <RuntimePackContent Include="$(PlatformManifestOutputPath)" PackagePath="$(ManifestsPackagePath)" />
    </ItemGroup>
  </Target>

  <!--
  ##############################################
  Targets related to crossgen
  ##############################################
  -->
  <PropertyGroup>
    <CrossgenToolDir>$(IntermediateOutputPath)crossgen\</CrossgenToolDir>
    <CrossgenPlatformAssembliesDir>$(IntermediateOutputPath)platformAssemblies\</CrossgenPlatformAssembliesDir>
  </PropertyGroup>

  <Target Name="Crossgen" DependsOnTargets="$(CrossgenDependsOn)" />

  <Target Name="_ExpandRuntimePackageRoot">
    <!--
      Use an item group for expansion of $($(RuntimePackageRootVariableName)) and $($(Crossgen2PackageRootMapping))
      (both illegal MSBuild expressions) i.e. the prop value's value.
    -->
    <ItemGroup>
      <RuntimePackageRootMapping Include="$(RuntimePackageRootVariableName)" />
      <RuntimePackageRootMapping>
        <RuntimePackageRoot>$(%(Identity))</RuntimePackageRoot>
      </RuntimePackageRootMapping>
      <Crossgen2PackageRootMapping Include="$(Crossgen2PackageRootVariableName)" />
      <Crossgen2PackageRootMapping>
        <Crossgen2PackageRoot>$(%(Identity))</Crossgen2PackageRoot>
      </Crossgen2PackageRootMapping>
    </ItemGroup>
    <PropertyGroup>
      <RuntimePackageRoot>@(RuntimePackageRootMapping->'%(RuntimePackageRoot)')</RuntimePackageRoot>
      <RuntimePackageRoot>$([MSBuild]::EnsureTrailingSlash('$(RuntimePackageRoot)'))</RuntimePackageRoot>
      <Crossgen2PackageRoot>@(Crossgen2PackageRootMapping->'%(Crossgen2PackageRoot)')</Crossgen2PackageRoot>
      <Crossgen2PackageRoot>$([MSBuild]::EnsureTrailingSlash('$(Crossgen2PackageRoot)'))</Crossgen2PackageRoot>
    </PropertyGroup>
  </Target>

  <Target Name="PrepareForCrossGen"
          Condition="'$(CrossgenOutput)' == 'true'"
          DependsOnTargets="_ExpandRuntimePackageRoot">
    <!-- The output directories of assemblies built in this repo contain a mix of ref and impl assemblies. Copy impl assemblies to a separate directory. -->
    <RemoveDir Directories="$(CrossgenPlatformAssembliesDir)" />
    <Copy SourceFiles="@(ReferenceCopyLocalPaths)" DestinationFolder="$(CrossgenPlatformAssembliesDir)" Condition="'%(ReferenceCopyLocalPaths.ProjectPath)' != ''"/>

    <!-- Resolve list of assemblies to crossgen2 -->
    <ItemGroup>
      <IntermediateCrossgenAssembly Include="@(ReferenceCopyLocalPaths)" Condition=" '%(ReferenceCopyLocalPaths.IsNativeImage)' != 'true' AND '%(ReferenceCopyLocalPaths.Extension)' != '.pdb'" />

      <!-- These are the paths used by crossgen2 to find assemblies that are expected to exist at runtime in the shared frameworks. -->
      <_PlatformAssemblyPaths Include="$(CrossgenToolDir)" />
      <!-- Include the directories of the assemblies not built in this repo. These contain only implementation assemblies. -->
      <_PlatformAssemblyPaths Include="@(ReferenceCopyLocalPaths->'%(RootDir)%(Directory)')" Condition="'%(ReferenceCopyLocalPaths.ProjectPath)' == ''"/>
      <!-- The output directories of assemblies built in this repo contain a mix of ref and impl assemblies. Use the directory with only impl assemblies. -->
      <_PlatformAssemblyPaths Include="$(CrossgenPlatformAssembliesDir)"/>

      <ReferenceCopyLocalPaths Remove="@(IntermediateCrossgenAssembly)" />
      <ReferenceCopyLocalPaths Include="@(IntermediateCrossgenAssembly->'$(TargetDir)%(FileName)%(Extension)')" />

      <_DistinctPlatformAssemblyPaths Include="@(_PlatformAssemblyPaths->Distinct())"/>
      <_DistinctPlatformAssemblyPaths>
        <CommandLineOption>-r:%(Identity)*.dll</CommandLineOption>
      </_DistinctPlatformAssemblyPaths>

      <Crossgen2PlatformAssemblyPaths Include="@(_DistinctPlatformAssemblyPaths->'%(CommandLineOption)')" />
    </ItemGroup>

    <PropertyGroup>
      <CrossgenToolPath>$([System.IO.Path]::Combine('$(Crossgen2PackageRoot)', 'tools', '$(Crossgen2ToolFileName)'))</CrossgenToolPath>
      <CrossgenSymbolsTargetDir>$(TargetDir)</CrossgenSymbolsTargetDir>

      <!-- Escaping (double backslash at end) required due to the way batch processes backslashes. -->
      <CrossgenSymbolsTargetDir Condition="HasTrailingSlash($(CrossgenSymbolsTargetDir)) AND '$(OS)' == 'Windows_NT'">$(TargetDir)\</CrossgenSymbolsTargetDir>
    </PropertyGroup>

    <RemoveDir Directories="$(CrossgenToolDir)" />
    <WriteLinesToFile
        Lines="@(Crossgen2PlatformAssemblyPaths)"
        File="$(CrossgenToolDir)PlatformAssembliesPathsCrossgen2.rsp"
        Overwrite="true" />

    <ItemGroup>
      <RuntimePackageFiles Include="$(RuntimePackageRoot)runtimes\**\*" />
    </ItemGroup>

    <Error Text="Could not find crossgen2 $(CrossgenToolPath)" Condition=" ! Exists($(CrossgenToolPath))" />

    <!-- Create tool directory with runtime assemblies -->
    <Copy SourceFiles="@(RuntimePackageFiles)" DestinationFolder="$(CrossGenToolDir)"/>
  </Target>

  <!-- Target executes once per @(IntermediateCrossgenAssembly) item. -->
  <Target Name="_BatchCrossGenAssemblies"
    DependsOnTargets="_ExpandRuntimePackageRoot"
    Inputs="@(IntermediateCrossgenAssembly)"
    Outputs="@(IntermediateCrossgenAssembly->'$(TargetDir)%(FileName)%(Extension)')">
    <PropertyGroup>
      <!--
        Handle different names for the target OS on the crossgen2 command line. This often matches neither
        $(TargetOsName) nor $(BuildOsName).
      -->
      <Crossgen2TargetOs>$(TargetOsName)</Crossgen2TargetOs>
      <Crossgen2TargetOs Condition="'$(TargetOsName)' == 'win'">windows</Crossgen2TargetOs>
      <Crossgen2TargetOs Condition="'$(TargetOsName)' == 'linux-musl'">linux</Crossgen2TargetOs>

      <!-- Compose the crossgen2 command line. -->
      <Crossgen2Args>--targetarch:$(TargetArchitecture)</Crossgen2Args>
      <Crossgen2Args>$(Crossgen2Args) --targetos:$(Crossgen2TargetOs)</Crossgen2Args>
      <Crossgen2Args>$(Crossgen2Args) -O</Crossgen2Args>
      <Crossgen2Args>$(Crossgen2Args) @&quot;$(CrossgenToolDir)PlatformAssembliesPathsCrossgen2.rsp&quot;</Crossgen2Args>
      <Crossgen2Args Condition="Exists('$(RuntimePackageRoot)tools\StandardOptimizationData.mibc')">$(Crossgen2Args) &quot;-m:$(RuntimePackageRoot)tools\StandardOptimizationData.mibc&quot;</Crossgen2Args>
      <Crossgen2Args Condition="'$(GenerateCrossgenProfilingSymbols)' == 'true' and '$(TargetOsName)' == 'win'">$(Crossgen2Args) --pdb --pdb-path:&quot;$(CrossgenSymbolsTargetDir)&quot;</Crossgen2Args>
      <Crossgen2Args Condition="'$(GenerateCrossgenProfilingSymbols)' == 'true' and '$(TargetOsName)' != 'win'">$(Crossgen2Args) --perfmap --perfmap-format-version:1 --perfmap-path:&quot;$(CrossgenSymbolsTargetDir)&quot;</Crossgen2Args>
    </PropertyGroup>

    <!-- All metadata in batched task comes from current @(IntermediateCrossgenAssembly) item. -->
    <Exec Command="&quot;$(CrossgenToolPath)&quot; $(Crossgen2Args) -o:&quot;$(TargetDir)%(FileName)%(Extension)&quot; &quot;%(IntermediateCrossgenAssembly.Identity)&quot;"
          IgnoreStandardErrorWarningFormat="true"
          StandardOutputImportance="High" />
  </Target>

  <!--
  #########################################
  Targets related to creating .zip/.tar.gz
  #########################################
  -->
  <Target Name="_DownloadAndExtractDotNetRuntime" Condition="'$(DotNetBuildFromSource)' != 'true'">
    <DownloadFile Condition=" ! Exists('$(DotNetRuntimeArchive)')"
      Uri="$(DotNetRuntimeDownloadUrl)"
      PrivateUri="$(DotNetRuntimePrivateDownloadUrl)"
      PrivateUriSuffix="$(DotNetAssetRootAccessTokenSuffix)"
      DestinationPath="$(DotNetRuntimeArchive)" />
    <RemoveDir Directories="$(RedistSharedFrameworkLayoutRoot)" />
    <MakeDir Directories="$(RedistSharedFrameworkLayoutRoot)" />

    <!-- Extract the dotnet-runtime archive -->
    <Exec Condition="'$(ArchiveExtension)' == '.tar.gz'"
      Command="tar -xzf $(DotNetRuntimeArchive) -C $(RedistSharedFrameworkLayoutRoot)" />

    <Unzip Condition="'$(ArchiveExtension)' == '.zip'"
      SourceFiles="$(DotNetRuntimeArchive)"
      DestinationFolder="$(RedistSharedFrameworkLayoutRoot)"
      OverwriteReadOnlyFiles="true" />
  </Target>

  <Target Name="_ResolveSharedFrameworkContent" DependsOnTargets="ResolveReferences;Crossgen">
    <ItemGroup>
      <SharedFxContent Include="$(DotVersionFileIntermediateOutputPath)" />
      <SharedFxContent Include="$(ProjectDepsFilePath)" />
      <SharedFxContent Include="$(ProjectRuntimeConfigFilePath)" />
      <SharedFxContent Include="@(ReferenceCopyLocalPaths)" Condition="'%(Extension)' != '.pdb'" />
      <SharedFxContent Include="$(RepoRoot)THIRD-PARTY-NOTICES.txt" />
    </ItemGroup>
  </Target>

  <!-- Written to take advantage of target batching in MSBuild. -->
  <Target Name="_BatchCopyToSharedFrameworkLayout"
          DependsOnTargets="_ResolveSharedFrameworkContent"
          Inputs="@(SharedFxContent)"
          Outputs="@(SharedFxContent->'$(SharedFxLayoutTargetDir)%(FileName)%(Extension)')">
    <RemoveDir Directories="$(SharedFrameworkLayoutRoot)" />
    <Copy SourceFiles="@(SharedFxContent)"
          DestinationFiles="@(SharedFxContent->'$(SharedFxLayoutTargetDir)%(FileName)%(Extension)')"
          UseHardlinksIfPossible="true" />
    <Message Importance="High" Text="$(MSbuildProjectFile) -> $(SharedFxLayoutTargetDir)" />
  </Target>

  <!-- Written to take advantage of target batching in MSBuild. -->
  <Target Name="_BatchCopyToRedistLayout"
          DependsOnTargets="_ResolveSharedFrameworkContent"
          Inputs="@(SharedFxContent)"
          Outputs="@(SharedFxContent->'$(RedistLayoutTargetDir)%(FileName)%(Extension)')">
    <RemoveDir Directories="$(RedistLayoutTargetDir)" />
    <Copy SourceFiles="@(SharedFxContent)"
          DestinationFiles="@(SharedFxContent->'$(RedistLayoutTargetDir)%(FileName)%(Extension)')"
          UseHardlinksIfPossible="true" />
    <Message Importance="High" Text="$(MSbuildProjectFile) -> $(RedistLayoutTargetDir)" />
  </Target>

  <!-- Required to workaround https://github.com/dotnet/core-setup/issues/4809. This copies the shared framework into the $reporoot/.dotnet folder so tests can run against the shared framework. -->
  <!-- This workaround is not needed in source build -->
  <Target Name="_InstallFrameworkIntoLocalDotNet"
          DependsOnTargets="_ResolveSharedFrameworkContent"
          Condition="'$(DotNetBuildFromSource)' != 'true'"
          Inputs="@(SharedFxContent)"
          Outputs="@(SharedFxContent->'$(LocalInstallationOutputPath)%(FileName)%(Extension)')">
    <RemoveDir Directories="$(LocalInstallationOutputPath)" />
    <Copy SourceFiles="@(SharedFxContent)"
          DestinationFiles="@(SharedFxContent->'$(LocalInstallationOutputPath)%(FileName)%(Extension)')"
          UseHardlinksIfPossible="true" />
    <Message Importance="High" Text="$(MSbuildProjectFile) -> $(LocalInstallationOutputPath)" />
  </Target>

  <Target Name="_CreateInternalSharedFxArchive"
          DependsOnTargets="_BatchCopyToSharedFrameworkLayout"
          Inputs="@(SharedFxContent)"
          Outputs="$(InternalArchiveOutputPath)">
    <ZipDirectory
      SourceDirectory="$(SharedFrameworkLayoutRoot)"
      DestinationFile="$(InternalArchiveOutputPath)"
      Overwrite="true"
      Condition="'$(ArchiveExtension)' == '.zip'" />
    <Exec
      Command="tar -czf $(InternalArchiveOutputPath) ."
      WorkingDirectory="$(SharedFrameworkLayoutRoot)"
      Condition="'$(ArchiveExtension)' == '.tar.gz'" />
    <Message Importance="High" Text="$(MSbuildProjectFile) -> $(InternalArchiveOutputPath)" />
  </Target>

  <!-- Redist tarball including the dotnet-runtime is not needed in source build -->
  <Target Name="_CreateRedistSharedFxArchive"
          DependsOnTargets="_DownloadAndExtractDotNetRuntime;_BatchCopyToRedistLayout"
          Condition="'$(DotNetBuildFromSource)' != 'true'"
          Inputs="@(SharedFxContent)"
          Outputs="$(RedistArchiveOutputPath)">
    <Message Importance="High" Text="$(MSbuildProjectFile) -> $(RedistArchiveOutputPath)" />
    <ZipDirectory
      SourceDirectory="$(RedistSharedFrameworkLayoutRoot)"
      DestinationFile="$(RedistArchiveOutputPath)"
      Overwrite="true"
      Condition="'$(ArchiveExtension)' == '.zip'" />
    <Exec
      Command="tar -czf $(RedistArchiveOutputPath) ."
      WorkingDirectory="$(RedistSharedFrameworkLayoutRoot)"
      Condition="'$(ArchiveExtension)' == '.tar.gz'" />
  </Target>

  <Target Name="IncludeFrameworkListFile"
          DependsOnTargets="_ResolveSharedFrameworkContent"
          BeforeTargets="_GetPackageFiles"
          Condition="'$(ManifestsPackagePath)' != ''">

    <ItemGroup>
      <SharedFxContent Condition="'%(SharedFxContent.Extension)' == '.dll'">
        <PackagePath Condition="'%(SharedFxContent.IsNativeImage)' == 'true'">$(NativeAssetsPackagePath)</PackagePath>
        <PackagePath Condition="'%(SharedFxContent.IsNativeImage)' != 'true'">$(ManagedAssetsPackagePath)</PackagePath>
      </SharedFxContent>
    </ItemGroup>

    <RepoTasks.CreateFrameworkListFile
      Files="@(SharedFxContent)"
      TargetFile="$(FrameworkListOutputPath)"
      RootAttributes="@(FrameworkListRootAttributes)" />

    <ItemGroup>
      <!-- We only need RuntimeList.xml in the .nupkg, so we intentionally do not include it in the archives -->
      <_PackageFiles Include="$(FrameworkListOutputPath)" PackagePath="$(ManifestsPackagePath)" />
      <_PackageFiles Include="@(RuntimePackContent)" />
    </ItemGroup>
  </Target>

  <Target Name="IncludeVersionFile"
          DependsOnTargets="GenerateSharedFxVersionsFiles"
          BeforeTargets="_GetPackageFiles">

    <ItemGroup>
      <None Include="$(VersionTxtFileIntermediateOutputPath)" Pack="true" PackagePath="." />
    </ItemGroup>
  </Target>

</Project>
