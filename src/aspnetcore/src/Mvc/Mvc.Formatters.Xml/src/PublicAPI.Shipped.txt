#nullable enable
Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable<TWrapped, TDeclared>
Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable<TWrapped, TDeclared>.Add(object! item) -> void
Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable<TWrapped, TDeclared>.DelegatingEnumerable() -> void
Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable<TWrapped, TDeclared>.DelegatingEnumerable(System.Collections.Generic.IEnumerable<TDeclared>! source, Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider! elementWrapperProvider) -> void
Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerable<TWrapped, TDeclared>.GetEnumerator() -> System.Collections.Generic.IEnumerator<TWrapped>!
Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerator<TWrapped, TDeclared>
Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerator<TWrapped, TDeclared>.Current.get -> TWrapped
Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerator<TWrapped, TDeclared>.DelegatingEnumerator(System.Collections.Generic.IEnumerator<TDeclared>! inner, Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider? wrapperProvider) -> void
Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerator<TWrapped, TDeclared>.Dispose() -> void
Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerator<TWrapped, TDeclared>.MoveNext() -> bool
Microsoft.AspNetCore.Mvc.Formatters.Xml.DelegatingEnumerator<TWrapped, TDeclared>.Reset() -> void
Microsoft.AspNetCore.Mvc.Formatters.Xml.EnumerableWrapperProvider
Microsoft.AspNetCore.Mvc.Formatters.Xml.EnumerableWrapperProvider.EnumerableWrapperProvider(System.Type! sourceEnumerableOfT, Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider? elementWrapperProvider) -> void
Microsoft.AspNetCore.Mvc.Formatters.Xml.EnumerableWrapperProvider.Wrap(object? original) -> object?
Microsoft.AspNetCore.Mvc.Formatters.Xml.EnumerableWrapperProvider.WrappingType.get -> System.Type!
Microsoft.AspNetCore.Mvc.Formatters.Xml.EnumerableWrapperProviderFactory
Microsoft.AspNetCore.Mvc.Formatters.Xml.EnumerableWrapperProviderFactory.EnumerableWrapperProviderFactory(System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProviderFactory!>! wrapperProviderFactories) -> void
Microsoft.AspNetCore.Mvc.Formatters.Xml.EnumerableWrapperProviderFactory.GetProvider(Microsoft.AspNetCore.Mvc.Formatters.Xml.WrapperProviderContext! context) -> Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider?
Microsoft.AspNetCore.Mvc.Formatters.Xml.IUnwrappable
Microsoft.AspNetCore.Mvc.Formatters.Xml.IUnwrappable.Unwrap(System.Type! declaredType) -> object!
Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider
Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider.Wrap(object? original) -> object?
Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider.WrappingType.get -> System.Type!
Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProviderFactory
Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProviderFactory.GetProvider(Microsoft.AspNetCore.Mvc.Formatters.Xml.WrapperProviderContext! context) -> Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider?
Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions
Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions.MvcXmlOptions() -> void
Microsoft.AspNetCore.Mvc.Formatters.Xml.ProblemDetailsWrapper
Microsoft.AspNetCore.Mvc.Formatters.Xml.ProblemDetailsWrapper.GetSchema() -> System.Xml.Schema.XmlSchema?
Microsoft.AspNetCore.Mvc.Formatters.Xml.ProblemDetailsWrapper.ProblemDetailsWrapper() -> void
Microsoft.AspNetCore.Mvc.Formatters.Xml.ProblemDetailsWrapper.ProblemDetailsWrapper(Microsoft.AspNetCore.Mvc.ProblemDetails! problemDetails) -> void
Microsoft.AspNetCore.Mvc.Formatters.Xml.SerializableErrorWrapper
Microsoft.AspNetCore.Mvc.Formatters.Xml.SerializableErrorWrapper.GetSchema() -> System.Xml.Schema.XmlSchema?
Microsoft.AspNetCore.Mvc.Formatters.Xml.SerializableErrorWrapper.ReadXml(System.Xml.XmlReader! reader) -> void
Microsoft.AspNetCore.Mvc.Formatters.Xml.SerializableErrorWrapper.SerializableError.get -> Microsoft.AspNetCore.Mvc.SerializableError!
Microsoft.AspNetCore.Mvc.Formatters.Xml.SerializableErrorWrapper.SerializableErrorWrapper() -> void
Microsoft.AspNetCore.Mvc.Formatters.Xml.SerializableErrorWrapper.SerializableErrorWrapper(Microsoft.AspNetCore.Mvc.SerializableError! error) -> void
Microsoft.AspNetCore.Mvc.Formatters.Xml.SerializableErrorWrapper.Unwrap(System.Type! declaredType) -> object!
Microsoft.AspNetCore.Mvc.Formatters.Xml.SerializableErrorWrapper.WriteXml(System.Xml.XmlWriter! writer) -> void
Microsoft.AspNetCore.Mvc.Formatters.Xml.SerializableErrorWrapperProvider
Microsoft.AspNetCore.Mvc.Formatters.Xml.SerializableErrorWrapperProvider.SerializableErrorWrapperProvider() -> void
Microsoft.AspNetCore.Mvc.Formatters.Xml.SerializableErrorWrapperProvider.Wrap(object? original) -> object?
Microsoft.AspNetCore.Mvc.Formatters.Xml.SerializableErrorWrapperProvider.WrappingType.get -> System.Type!
Microsoft.AspNetCore.Mvc.Formatters.Xml.SerializableErrorWrapperProviderFactory
Microsoft.AspNetCore.Mvc.Formatters.Xml.SerializableErrorWrapperProviderFactory.GetProvider(Microsoft.AspNetCore.Mvc.Formatters.Xml.WrapperProviderContext! context) -> Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider?
Microsoft.AspNetCore.Mvc.Formatters.Xml.SerializableErrorWrapperProviderFactory.SerializableErrorWrapperProviderFactory() -> void
Microsoft.AspNetCore.Mvc.Formatters.Xml.ValidationProblemDetailsWrapper
Microsoft.AspNetCore.Mvc.Formatters.Xml.ValidationProblemDetailsWrapper.ValidationProblemDetailsWrapper() -> void
Microsoft.AspNetCore.Mvc.Formatters.Xml.ValidationProblemDetailsWrapper.ValidationProblemDetailsWrapper(Microsoft.AspNetCore.Mvc.ValidationProblemDetails! problemDetails) -> void
Microsoft.AspNetCore.Mvc.Formatters.Xml.WrapperProviderContext
Microsoft.AspNetCore.Mvc.Formatters.Xml.WrapperProviderContext.DeclaredType.get -> System.Type!
Microsoft.AspNetCore.Mvc.Formatters.Xml.WrapperProviderContext.IsSerialization.get -> bool
Microsoft.AspNetCore.Mvc.Formatters.Xml.WrapperProviderContext.WrapperProviderContext(System.Type! declaredType, bool isSerialization) -> void
Microsoft.AspNetCore.Mvc.Formatters.Xml.WrapperProviderFactoriesExtensions
Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerInputFormatter
Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerInputFormatter.MaxDepth.get -> int
Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerInputFormatter.MaxDepth.set -> void
Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerInputFormatter.SerializerSettings.get -> System.Runtime.Serialization.DataContractSerializerSettings!
Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerInputFormatter.SerializerSettings.set -> void
Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerInputFormatter.WrapperProviderFactories.get -> System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProviderFactory!>!
Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerInputFormatter.XmlDataContractSerializerInputFormatter(Microsoft.AspNetCore.Mvc.MvcOptions! options) -> void
Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerInputFormatter.XmlDictionaryReaderQuotas.get -> System.Xml.XmlDictionaryReaderQuotas!
Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter
Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter.SerializerSettings.get -> System.Runtime.Serialization.DataContractSerializerSettings!
Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter.SerializerSettings.set -> void
Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter.WrapperProviderFactories.get -> System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProviderFactory!>!
Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter.WriterSettings.get -> System.Xml.XmlWriterSettings!
Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter.XmlDataContractSerializerOutputFormatter() -> void
Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter.XmlDataContractSerializerOutputFormatter(Microsoft.Extensions.Logging.ILoggerFactory! loggerFactory) -> void
Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter.XmlDataContractSerializerOutputFormatter(System.Xml.XmlWriterSettings! writerSettings) -> void
Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter.XmlDataContractSerializerOutputFormatter(System.Xml.XmlWriterSettings! writerSettings, Microsoft.Extensions.Logging.ILoggerFactory! loggerFactory) -> void
Microsoft.AspNetCore.Mvc.Formatters.XmlSerializerInputFormatter
Microsoft.AspNetCore.Mvc.Formatters.XmlSerializerInputFormatter.MaxDepth.get -> int
Microsoft.AspNetCore.Mvc.Formatters.XmlSerializerInputFormatter.MaxDepth.set -> void
Microsoft.AspNetCore.Mvc.Formatters.XmlSerializerInputFormatter.WrapperProviderFactories.get -> System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProviderFactory!>!
Microsoft.AspNetCore.Mvc.Formatters.XmlSerializerInputFormatter.XmlDictionaryReaderQuotas.get -> System.Xml.XmlDictionaryReaderQuotas!
Microsoft.AspNetCore.Mvc.Formatters.XmlSerializerInputFormatter.XmlSerializerInputFormatter(Microsoft.AspNetCore.Mvc.MvcOptions! options) -> void
Microsoft.AspNetCore.Mvc.Formatters.XmlSerializerOutputFormatter
Microsoft.AspNetCore.Mvc.Formatters.XmlSerializerOutputFormatter.WrapperProviderFactories.get -> System.Collections.Generic.IList<Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProviderFactory!>!
Microsoft.AspNetCore.Mvc.Formatters.XmlSerializerOutputFormatter.WriterSettings.get -> System.Xml.XmlWriterSettings!
Microsoft.AspNetCore.Mvc.Formatters.XmlSerializerOutputFormatter.XmlSerializerOutputFormatter() -> void
Microsoft.AspNetCore.Mvc.Formatters.XmlSerializerOutputFormatter.XmlSerializerOutputFormatter(Microsoft.Extensions.Logging.ILoggerFactory! loggerFactory) -> void
Microsoft.AspNetCore.Mvc.Formatters.XmlSerializerOutputFormatter.XmlSerializerOutputFormatter(System.Xml.XmlWriterSettings! writerSettings) -> void
Microsoft.AspNetCore.Mvc.Formatters.XmlSerializerOutputFormatter.XmlSerializerOutputFormatter(System.Xml.XmlWriterSettings! writerSettings, Microsoft.Extensions.Logging.ILoggerFactory! loggerFactory) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DataMemberRequiredBindingMetadataProvider
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DataMemberRequiredBindingMetadataProvider.CreateBindingMetadata(Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.BindingMetadataProviderContext! context) -> void
Microsoft.AspNetCore.Mvc.ModelBinding.Metadata.DataMemberRequiredBindingMetadataProvider.DataMemberRequiredBindingMetadataProvider() -> void
Microsoft.Extensions.DependencyInjection.MvcXmlMvcBuilderExtensions
Microsoft.Extensions.DependencyInjection.MvcXmlMvcCoreBuilderExtensions
override Microsoft.AspNetCore.Mvc.Formatters.Xml.ValidationProblemDetailsWrapper.ReadValue(System.Xml.XmlReader! reader, string! name) -> void
override Microsoft.AspNetCore.Mvc.Formatters.Xml.ValidationProblemDetailsWrapper.WriteXml(System.Xml.XmlWriter! writer) -> void
override Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerInputFormatter.CanReadType(System.Type! type) -> bool
override Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerInputFormatter.ReadRequestBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext! context, System.Text.Encoding! encoding) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.Formatters.InputFormatterResult!>!
override Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter.CanWriteType(System.Type? type) -> bool
override Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter.WriteResponseBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext! context, System.Text.Encoding! selectedEncoding) -> System.Threading.Tasks.Task!
override Microsoft.AspNetCore.Mvc.Formatters.XmlSerializerInputFormatter.CanReadType(System.Type! type) -> bool
override Microsoft.AspNetCore.Mvc.Formatters.XmlSerializerInputFormatter.ReadRequestBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext! context, System.Text.Encoding! encoding) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.Formatters.InputFormatterResult!>!
override Microsoft.AspNetCore.Mvc.Formatters.XmlSerializerOutputFormatter.CanWriteType(System.Type? type) -> bool
override Microsoft.AspNetCore.Mvc.Formatters.XmlSerializerOutputFormatter.WriteResponseBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext! context, System.Text.Encoding! selectedEncoding) -> System.Threading.Tasks.Task!
static Microsoft.AspNetCore.Mvc.Formatters.Xml.WrapperProviderFactoriesExtensions.GetWrapperProvider(this System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProviderFactory!>! wrapperProviderFactories, Microsoft.AspNetCore.Mvc.Formatters.Xml.WrapperProviderContext! wrapperProviderContext) -> Microsoft.AspNetCore.Mvc.Formatters.Xml.IWrapperProvider?
static Microsoft.Extensions.DependencyInjection.MvcXmlMvcBuilderExtensions.AddXmlDataContractSerializerFormatters(this Microsoft.Extensions.DependencyInjection.IMvcBuilder! builder) -> Microsoft.Extensions.DependencyInjection.IMvcBuilder!
static Microsoft.Extensions.DependencyInjection.MvcXmlMvcBuilderExtensions.AddXmlDataContractSerializerFormatters(this Microsoft.Extensions.DependencyInjection.IMvcBuilder! builder, System.Action<Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions!>! setupAction) -> Microsoft.Extensions.DependencyInjection.IMvcBuilder!
static Microsoft.Extensions.DependencyInjection.MvcXmlMvcBuilderExtensions.AddXmlOptions(this Microsoft.Extensions.DependencyInjection.IMvcBuilder! builder, System.Action<Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions!>! setupAction) -> Microsoft.Extensions.DependencyInjection.IMvcBuilder!
static Microsoft.Extensions.DependencyInjection.MvcXmlMvcBuilderExtensions.AddXmlSerializerFormatters(this Microsoft.Extensions.DependencyInjection.IMvcBuilder! builder) -> Microsoft.Extensions.DependencyInjection.IMvcBuilder!
static Microsoft.Extensions.DependencyInjection.MvcXmlMvcBuilderExtensions.AddXmlSerializerFormatters(this Microsoft.Extensions.DependencyInjection.IMvcBuilder! builder, System.Action<Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions!>! setupAction) -> Microsoft.Extensions.DependencyInjection.IMvcBuilder!
static Microsoft.Extensions.DependencyInjection.MvcXmlMvcCoreBuilderExtensions.AddXmlDataContractSerializerFormatters(this Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder! builder) -> Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder!
static Microsoft.Extensions.DependencyInjection.MvcXmlMvcCoreBuilderExtensions.AddXmlDataContractSerializerFormatters(this Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder! builder, System.Action<Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions!>! setupAction) -> Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder!
static Microsoft.Extensions.DependencyInjection.MvcXmlMvcCoreBuilderExtensions.AddXmlOptions(this Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder! builder, System.Action<Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions!>! setupAction) -> Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder!
static Microsoft.Extensions.DependencyInjection.MvcXmlMvcCoreBuilderExtensions.AddXmlSerializerFormatters(this Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder! builder) -> Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder!
static Microsoft.Extensions.DependencyInjection.MvcXmlMvcCoreBuilderExtensions.AddXmlSerializerFormatters(this Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder! builder, System.Action<Microsoft.AspNetCore.Mvc.Formatters.Xml.MvcXmlOptions!>! setupAction) -> Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder!
static readonly Microsoft.AspNetCore.Mvc.Formatters.Xml.ProblemDetailsWrapper.EmptyKey -> string!
virtual Microsoft.AspNetCore.Mvc.Formatters.Xml.ProblemDetailsWrapper.ReadValue(System.Xml.XmlReader! reader, string! name) -> void
virtual Microsoft.AspNetCore.Mvc.Formatters.Xml.ProblemDetailsWrapper.ReadXml(System.Xml.XmlReader! reader) -> void
virtual Microsoft.AspNetCore.Mvc.Formatters.Xml.ProblemDetailsWrapper.WriteXml(System.Xml.XmlWriter! writer) -> void
virtual Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerInputFormatter.CreateSerializer(System.Type! type) -> System.Runtime.Serialization.DataContractSerializer?
virtual Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerInputFormatter.CreateXmlReader(System.IO.Stream! readStream, System.Text.Encoding! encoding) -> System.Xml.XmlReader!
virtual Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerInputFormatter.ExceptionPolicy.get -> Microsoft.AspNetCore.Mvc.Formatters.InputFormatterExceptionPolicy
virtual Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerInputFormatter.GetCachedSerializer(System.Type! type) -> System.Runtime.Serialization.DataContractSerializer!
virtual Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerInputFormatter.GetSerializableType(System.Type! declaredType) -> System.Type!
virtual Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter.CreateSerializer(System.Type! type) -> System.Runtime.Serialization.DataContractSerializer?
virtual Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter.CreateXmlWriter(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext! context, System.IO.TextWriter! writer, System.Xml.XmlWriterSettings! xmlWriterSettings) -> System.Xml.XmlWriter!
virtual Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter.CreateXmlWriter(System.IO.TextWriter! writer, System.Xml.XmlWriterSettings! xmlWriterSettings) -> System.Xml.XmlWriter!
virtual Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter.GetCachedSerializer(System.Type! type) -> System.Runtime.Serialization.DataContractSerializer!
virtual Microsoft.AspNetCore.Mvc.Formatters.XmlDataContractSerializerOutputFormatter.GetSerializableType(System.Type! type) -> System.Type!
virtual Microsoft.AspNetCore.Mvc.Formatters.XmlSerializerInputFormatter.CreateSerializer(System.Type! type) -> System.Xml.Serialization.XmlSerializer?
virtual Microsoft.AspNetCore.Mvc.Formatters.XmlSerializerInputFormatter.CreateXmlReader(System.IO.Stream! readStream, System.Text.Encoding! encoding) -> System.Xml.XmlReader!
virtual Microsoft.AspNetCore.Mvc.Formatters.XmlSerializerInputFormatter.CreateXmlReader(System.IO.Stream! readStream, System.Text.Encoding! encoding, System.Type! type) -> System.Xml.XmlReader!
virtual Microsoft.AspNetCore.Mvc.Formatters.XmlSerializerInputFormatter.ExceptionPolicy.get -> Microsoft.AspNetCore.Mvc.Formatters.InputFormatterExceptionPolicy
virtual Microsoft.AspNetCore.Mvc.Formatters.XmlSerializerInputFormatter.GetCachedSerializer(System.Type! type) -> System.Xml.Serialization.XmlSerializer!
virtual Microsoft.AspNetCore.Mvc.Formatters.XmlSerializerInputFormatter.GetSerializableType(System.Type! declaredType) -> System.Type!
virtual Microsoft.AspNetCore.Mvc.Formatters.XmlSerializerOutputFormatter.CreateSerializer(System.Type! type) -> System.Xml.Serialization.XmlSerializer?
virtual Microsoft.AspNetCore.Mvc.Formatters.XmlSerializerOutputFormatter.CreateXmlWriter(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext! context, System.IO.TextWriter! writer, System.Xml.XmlWriterSettings! xmlWriterSettings) -> System.Xml.XmlWriter!
virtual Microsoft.AspNetCore.Mvc.Formatters.XmlSerializerOutputFormatter.CreateXmlWriter(System.IO.TextWriter! writer, System.Xml.XmlWriterSettings! xmlWriterSettings) -> System.Xml.XmlWriter!
virtual Microsoft.AspNetCore.Mvc.Formatters.XmlSerializerOutputFormatter.GetCachedSerializer(System.Type! type) -> System.Xml.Serialization.XmlSerializer!
virtual Microsoft.AspNetCore.Mvc.Formatters.XmlSerializerOutputFormatter.GetSerializableType(System.Type! type) -> System.Type!
virtual Microsoft.AspNetCore.Mvc.Formatters.XmlSerializerOutputFormatter.Serialize(System.Xml.Serialization.XmlSerializer! xmlSerializer, System.Xml.XmlWriter! xmlWriter, object? value) -> void
