#nullable enable
~static Microsoft.AspNetCore.Mvc.JsonPatchExtensions.ApplyTo<T>(this Microsoft.AspNetCore.JsonPatch.JsonPatchDocument<T!>! patchDoc, T! objectToApplyTo, Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary! modelState) -> void
~static Microsoft.AspNetCore.Mvc.JsonPatchExtensions.ApplyTo<T>(this Microsoft.AspNetCore.JsonPatch.JsonPatchDocument<T!>! patchDoc, T! objectToApplyTo, Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary! modelState, string! prefix) -> void
Microsoft.AspNetCore.Mvc.Formatters.NewtonsoftJsonInputFormatter
Microsoft.AspNetCore.Mvc.Formatters.NewtonsoftJsonInputFormatter.NewtonsoftJsonInputFormatter(Microsoft.Extensions.Logging.ILogger! logger, Newtonsoft.Json.JsonSerializerSettings! serializerSettings, System.Buffers.ArrayPool<char>! charPool, Microsoft.Extensions.ObjectPool.ObjectPoolProvider! objectPoolProvider, Microsoft.AspNetCore.Mvc.MvcOptions! options, Microsoft.AspNetCore.Mvc.MvcNewtonsoftJsonOptions! jsonOptions) -> void
Microsoft.AspNetCore.Mvc.Formatters.NewtonsoftJsonInputFormatter.SerializerSettings.get -> Newtonsoft.Json.JsonSerializerSettings!
Microsoft.AspNetCore.Mvc.Formatters.NewtonsoftJsonOutputFormatter
Microsoft.AspNetCore.Mvc.Formatters.NewtonsoftJsonOutputFormatter.NewtonsoftJsonOutputFormatter(Newtonsoft.Json.JsonSerializerSettings! serializerSettings, System.Buffers.ArrayPool<char>! charPool, Microsoft.AspNetCore.Mvc.MvcOptions! mvcOptions) -> void
Microsoft.AspNetCore.Mvc.Formatters.NewtonsoftJsonOutputFormatter.NewtonsoftJsonOutputFormatter(Newtonsoft.Json.JsonSerializerSettings! serializerSettings, System.Buffers.ArrayPool<char>! charPool, Microsoft.AspNetCore.Mvc.MvcOptions! mvcOptions, Microsoft.AspNetCore.Mvc.MvcNewtonsoftJsonOptions? jsonOptions) -> void
Microsoft.AspNetCore.Mvc.Formatters.NewtonsoftJsonOutputFormatter.SerializerSettings.get -> Newtonsoft.Json.JsonSerializerSettings!
Microsoft.AspNetCore.Mvc.Formatters.NewtonsoftJsonPatchInputFormatter
Microsoft.AspNetCore.Mvc.Formatters.NewtonsoftJsonPatchInputFormatter.NewtonsoftJsonPatchInputFormatter(Microsoft.Extensions.Logging.ILogger! logger, Newtonsoft.Json.JsonSerializerSettings! serializerSettings, System.Buffers.ArrayPool<char>! charPool, Microsoft.Extensions.ObjectPool.ObjectPoolProvider! objectPoolProvider, Microsoft.AspNetCore.Mvc.MvcOptions! options, Microsoft.AspNetCore.Mvc.MvcNewtonsoftJsonOptions! jsonOptions) -> void
Microsoft.AspNetCore.Mvc.JsonPatchExtensions
Microsoft.AspNetCore.Mvc.MvcNewtonsoftJsonOptions
Microsoft.AspNetCore.Mvc.MvcNewtonsoftJsonOptions.AllowInputFormatterExceptionMessages.get -> bool
Microsoft.AspNetCore.Mvc.MvcNewtonsoftJsonOptions.AllowInputFormatterExceptionMessages.set -> void
Microsoft.AspNetCore.Mvc.MvcNewtonsoftJsonOptions.InputFormatterMemoryBufferThreshold.get -> int
Microsoft.AspNetCore.Mvc.MvcNewtonsoftJsonOptions.InputFormatterMemoryBufferThreshold.set -> void
Microsoft.AspNetCore.Mvc.MvcNewtonsoftJsonOptions.MvcNewtonsoftJsonOptions() -> void
Microsoft.AspNetCore.Mvc.MvcNewtonsoftJsonOptions.OutputFormatterMemoryBufferThreshold.get -> int
Microsoft.AspNetCore.Mvc.MvcNewtonsoftJsonOptions.OutputFormatterMemoryBufferThreshold.set -> void
Microsoft.AspNetCore.Mvc.MvcNewtonsoftJsonOptions.ReadJsonWithRequestCulture.get -> bool
Microsoft.AspNetCore.Mvc.MvcNewtonsoftJsonOptions.ReadJsonWithRequestCulture.set -> void
Microsoft.AspNetCore.Mvc.MvcNewtonsoftJsonOptions.SerializerSettings.get -> Newtonsoft.Json.JsonSerializerSettings!
Microsoft.AspNetCore.Mvc.NewtonsoftJson.JsonSerializerSettingsProvider
Microsoft.AspNetCore.Mvc.NewtonsoftJson.ProblemDetailsConverter
Microsoft.AspNetCore.Mvc.NewtonsoftJson.ProblemDetailsConverter.ProblemDetailsConverter() -> void
Microsoft.AspNetCore.Mvc.NewtonsoftJson.ValidationProblemDetailsConverter
Microsoft.AspNetCore.Mvc.NewtonsoftJson.ValidationProblemDetailsConverter.ValidationProblemDetailsConverter() -> void
Microsoft.AspNetCore.Mvc.Rendering.JsonHelperExtensions
Microsoft.Extensions.DependencyInjection.MvcNewtonsoftJsonOptionsExtensions
Microsoft.Extensions.DependencyInjection.NewtonsoftJsonMvcBuilderExtensions
Microsoft.Extensions.DependencyInjection.NewtonsoftJsonMvcCoreBuilderExtensions
override Microsoft.AspNetCore.Mvc.Formatters.NewtonsoftJsonInputFormatter.ReadRequestBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext! context, System.Text.Encoding! encoding) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.Formatters.InputFormatterResult!>!
override Microsoft.AspNetCore.Mvc.Formatters.NewtonsoftJsonOutputFormatter.WriteResponseBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext! context, System.Text.Encoding! selectedEncoding) -> System.Threading.Tasks.Task!
override Microsoft.AspNetCore.Mvc.Formatters.NewtonsoftJsonPatchInputFormatter.CanRead(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext! context) -> bool
override Microsoft.AspNetCore.Mvc.Formatters.NewtonsoftJsonPatchInputFormatter.ExceptionPolicy.get -> Microsoft.AspNetCore.Mvc.Formatters.InputFormatterExceptionPolicy
override Microsoft.AspNetCore.Mvc.Formatters.NewtonsoftJsonPatchInputFormatter.ReadRequestBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext! context, System.Text.Encoding! encoding) -> System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.Formatters.InputFormatterResult!>!
override Microsoft.AspNetCore.Mvc.NewtonsoftJson.ProblemDetailsConverter.CanConvert(System.Type! objectType) -> bool
override Microsoft.AspNetCore.Mvc.NewtonsoftJson.ProblemDetailsConverter.ReadJson(Newtonsoft.Json.JsonReader! reader, System.Type! objectType, object? existingValue, Newtonsoft.Json.JsonSerializer! serializer) -> object?
override Microsoft.AspNetCore.Mvc.NewtonsoftJson.ProblemDetailsConverter.WriteJson(Newtonsoft.Json.JsonWriter! writer, object? value, Newtonsoft.Json.JsonSerializer! serializer) -> void
override Microsoft.AspNetCore.Mvc.NewtonsoftJson.ValidationProblemDetailsConverter.CanConvert(System.Type! objectType) -> bool
override Microsoft.AspNetCore.Mvc.NewtonsoftJson.ValidationProblemDetailsConverter.ReadJson(Newtonsoft.Json.JsonReader! reader, System.Type! objectType, object? existingValue, Newtonsoft.Json.JsonSerializer! serializer) -> object?
override Microsoft.AspNetCore.Mvc.NewtonsoftJson.ValidationProblemDetailsConverter.WriteJson(Newtonsoft.Json.JsonWriter! writer, object? value, Newtonsoft.Json.JsonSerializer! serializer) -> void
static Microsoft.AspNetCore.Mvc.NewtonsoftJson.JsonSerializerSettingsProvider.CreateSerializerSettings() -> Newtonsoft.Json.JsonSerializerSettings!
static Microsoft.AspNetCore.Mvc.Rendering.JsonHelperExtensions.Serialize(this Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper! jsonHelper, object! value, Newtonsoft.Json.JsonSerializerSettings! serializerSettings) -> Microsoft.AspNetCore.Html.IHtmlContent!
static Microsoft.Extensions.DependencyInjection.MvcNewtonsoftJsonOptionsExtensions.UseCamelCasing(this Microsoft.AspNetCore.Mvc.MvcNewtonsoftJsonOptions! options, bool processDictionaryKeys) -> Microsoft.AspNetCore.Mvc.MvcNewtonsoftJsonOptions!
static Microsoft.Extensions.DependencyInjection.MvcNewtonsoftJsonOptionsExtensions.UseMemberCasing(this Microsoft.AspNetCore.Mvc.MvcNewtonsoftJsonOptions! options) -> Microsoft.AspNetCore.Mvc.MvcNewtonsoftJsonOptions!
static Microsoft.Extensions.DependencyInjection.NewtonsoftJsonMvcBuilderExtensions.AddNewtonsoftJson(this Microsoft.Extensions.DependencyInjection.IMvcBuilder! builder) -> Microsoft.Extensions.DependencyInjection.IMvcBuilder!
static Microsoft.Extensions.DependencyInjection.NewtonsoftJsonMvcBuilderExtensions.AddNewtonsoftJson(this Microsoft.Extensions.DependencyInjection.IMvcBuilder! builder, System.Action<Microsoft.AspNetCore.Mvc.MvcNewtonsoftJsonOptions!>! setupAction) -> Microsoft.Extensions.DependencyInjection.IMvcBuilder!
static Microsoft.Extensions.DependencyInjection.NewtonsoftJsonMvcCoreBuilderExtensions.AddNewtonsoftJson(this Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder! builder) -> Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder!
static Microsoft.Extensions.DependencyInjection.NewtonsoftJsonMvcCoreBuilderExtensions.AddNewtonsoftJson(this Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder! builder, System.Action<Microsoft.AspNetCore.Mvc.MvcNewtonsoftJsonOptions!>! setupAction) -> Microsoft.Extensions.DependencyInjection.IMvcCoreBuilder!
virtual Microsoft.AspNetCore.Mvc.Formatters.NewtonsoftJsonInputFormatter.CreateJsonSerializer() -> Newtonsoft.Json.JsonSerializer!
virtual Microsoft.AspNetCore.Mvc.Formatters.NewtonsoftJsonInputFormatter.CreateJsonSerializer(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext! context) -> Newtonsoft.Json.JsonSerializer!
virtual Microsoft.AspNetCore.Mvc.Formatters.NewtonsoftJsonInputFormatter.ExceptionPolicy.get -> Microsoft.AspNetCore.Mvc.Formatters.InputFormatterExceptionPolicy
virtual Microsoft.AspNetCore.Mvc.Formatters.NewtonsoftJsonInputFormatter.ReleaseJsonSerializer(Newtonsoft.Json.JsonSerializer! serializer) -> void
virtual Microsoft.AspNetCore.Mvc.Formatters.NewtonsoftJsonOutputFormatter.CreateJsonSerializer() -> Newtonsoft.Json.JsonSerializer!
virtual Microsoft.AspNetCore.Mvc.Formatters.NewtonsoftJsonOutputFormatter.CreateJsonSerializer(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext! context) -> Newtonsoft.Json.JsonSerializer!
virtual Microsoft.AspNetCore.Mvc.Formatters.NewtonsoftJsonOutputFormatter.CreateJsonWriter(System.IO.TextWriter! writer) -> Newtonsoft.Json.JsonWriter!
