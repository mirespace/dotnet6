#nullable enable
~Microsoft.AspNetCore.Builder.SessionOptions.Cookie.get -> Microsoft.AspNetCore.Http.CookieBuilder
~Microsoft.AspNetCore.Builder.SessionOptions.Cookie.set -> void
~Microsoft.AspNetCore.Session.DistributedSession.CommitAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
~Microsoft.AspNetCore.Session.DistributedSession.DistributedSession(Microsoft.Extensions.Caching.Distributed.IDistributedCache cache, string sessionKey, System.TimeSpan idleTimeout, System.TimeSpan ioTimeout, System.Func<bool> tryEstablishSession, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory, bool isNewSessionKey) -> void
~Microsoft.AspNetCore.Session.DistributedSession.Id.get -> string
~Microsoft.AspNetCore.Session.DistributedSession.Keys.get -> System.Collections.Generic.IEnumerable<string>
~Microsoft.AspNetCore.Session.DistributedSession.LoadAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
~Microsoft.AspNetCore.Session.DistributedSession.Remove(string key) -> void
~Microsoft.AspNetCore.Session.DistributedSession.Set(string key, byte[] value) -> void
~Microsoft.AspNetCore.Session.DistributedSession.TryGetValue(string key, out byte[] value) -> bool
~Microsoft.AspNetCore.Session.DistributedSessionStore.Create(string sessionKey, System.TimeSpan idleTimeout, System.TimeSpan ioTimeout, System.Func<bool> tryEstablishSession, bool isNewSessionKey) -> Microsoft.AspNetCore.Http.ISession
~Microsoft.AspNetCore.Session.DistributedSessionStore.DistributedSessionStore(Microsoft.Extensions.Caching.Distributed.IDistributedCache cache, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory) -> void
~Microsoft.AspNetCore.Session.ISessionStore.Create(string sessionKey, System.TimeSpan idleTimeout, System.TimeSpan ioTimeout, System.Func<bool> tryEstablishSession, bool isNewSessionKey) -> Microsoft.AspNetCore.Http.ISession
~Microsoft.AspNetCore.Session.SessionFeature.Session.get -> Microsoft.AspNetCore.Http.ISession
~Microsoft.AspNetCore.Session.SessionFeature.Session.set -> void
~Microsoft.AspNetCore.Session.SessionMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext context) -> System.Threading.Tasks.Task
~Microsoft.AspNetCore.Session.SessionMiddleware.SessionMiddleware(Microsoft.AspNetCore.Http.RequestDelegate next, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory, Microsoft.AspNetCore.DataProtection.IDataProtectionProvider dataProtectionProvider, Microsoft.AspNetCore.Session.ISessionStore sessionStore, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Builder.SessionOptions> options) -> void
~Microsoft.AspNetCore.Session.SessionMiddleware.SessionMiddleware(Microsoft.AspNetCore.Http.RequestDelegate! next, Microsoft.Extensions.Logging.ILoggerFactory! loggerFactory, Microsoft.AspNetCore.DataProtection.IDataProtectionProvider! dataProtectionProvider, Microsoft.AspNetCore.Session.ISessionStore! sessionStore, Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.Builder.SessionOptions!>! options) -> void
~static Microsoft.AspNetCore.Builder.SessionMiddlewareExtensions.UseSession(this Microsoft.AspNetCore.Builder.IApplicationBuilder app) -> Microsoft.AspNetCore.Builder.IApplicationBuilder
~static Microsoft.AspNetCore.Builder.SessionMiddlewareExtensions.UseSession(this Microsoft.AspNetCore.Builder.IApplicationBuilder app, Microsoft.AspNetCore.Builder.SessionOptions options) -> Microsoft.AspNetCore.Builder.IApplicationBuilder
~static Microsoft.Extensions.DependencyInjection.SessionServiceCollectionExtensions.AddSession(this Microsoft.Extensions.DependencyInjection.IServiceCollection services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
~static Microsoft.Extensions.DependencyInjection.SessionServiceCollectionExtensions.AddSession(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Action<Microsoft.AspNetCore.Builder.SessionOptions> configure) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
~static readonly Microsoft.AspNetCore.Session.SessionDefaults.CookieName -> string
~static readonly Microsoft.AspNetCore.Session.SessionDefaults.CookiePath -> string
Microsoft.AspNetCore.Builder.SessionMiddlewareExtensions
Microsoft.AspNetCore.Builder.SessionOptions
Microsoft.AspNetCore.Builder.SessionOptions.Cookie.get -> Microsoft.AspNetCore.Http.CookieBuilder!
Microsoft.AspNetCore.Builder.SessionOptions.Cookie.set -> void
Microsoft.AspNetCore.Builder.SessionOptions.IdleTimeout.get -> System.TimeSpan
Microsoft.AspNetCore.Builder.SessionOptions.IdleTimeout.set -> void
Microsoft.AspNetCore.Builder.SessionOptions.IOTimeout.get -> System.TimeSpan
Microsoft.AspNetCore.Builder.SessionOptions.IOTimeout.set -> void
Microsoft.AspNetCore.Builder.SessionOptions.SessionOptions() -> void
Microsoft.AspNetCore.Session.DistributedSession
Microsoft.AspNetCore.Session.DistributedSession.Clear() -> void
Microsoft.AspNetCore.Session.DistributedSession.CommitAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Session.DistributedSession.DistributedSession(Microsoft.Extensions.Caching.Distributed.IDistributedCache! cache, string! sessionKey, System.TimeSpan idleTimeout, System.TimeSpan ioTimeout, System.Func<bool>! tryEstablishSession, Microsoft.Extensions.Logging.ILoggerFactory! loggerFactory, bool isNewSessionKey) -> void
Microsoft.AspNetCore.Session.DistributedSession.Id.get -> string!
Microsoft.AspNetCore.Session.DistributedSession.IsAvailable.get -> bool
Microsoft.AspNetCore.Session.DistributedSession.Keys.get -> System.Collections.Generic.IEnumerable<string!>!
Microsoft.AspNetCore.Session.DistributedSession.LoadAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Session.DistributedSession.Remove(string! key) -> void
Microsoft.AspNetCore.Session.DistributedSession.Set(string! key, byte[]! value) -> void
Microsoft.AspNetCore.Session.DistributedSession.TryGetValue(string! key, out byte[]? value) -> bool
Microsoft.AspNetCore.Session.DistributedSessionStore
Microsoft.AspNetCore.Session.DistributedSessionStore.Create(string! sessionKey, System.TimeSpan idleTimeout, System.TimeSpan ioTimeout, System.Func<bool>! tryEstablishSession, bool isNewSessionKey) -> Microsoft.AspNetCore.Http.ISession!
Microsoft.AspNetCore.Session.DistributedSessionStore.DistributedSessionStore(Microsoft.Extensions.Caching.Distributed.IDistributedCache! cache, Microsoft.Extensions.Logging.ILoggerFactory! loggerFactory) -> void
Microsoft.AspNetCore.Session.ISessionStore
Microsoft.AspNetCore.Session.ISessionStore.Create(string! sessionKey, System.TimeSpan idleTimeout, System.TimeSpan ioTimeout, System.Func<bool>! tryEstablishSession, bool isNewSessionKey) -> Microsoft.AspNetCore.Http.ISession!
Microsoft.AspNetCore.Session.SessionDefaults
Microsoft.AspNetCore.Session.SessionFeature
Microsoft.AspNetCore.Session.SessionFeature.Session.get -> Microsoft.AspNetCore.Http.ISession!
Microsoft.AspNetCore.Session.SessionFeature.Session.set -> void
Microsoft.AspNetCore.Session.SessionFeature.SessionFeature() -> void
Microsoft.AspNetCore.Session.SessionMiddleware
Microsoft.AspNetCore.Session.SessionMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext! context) -> System.Threading.Tasks.Task!
Microsoft.Extensions.DependencyInjection.SessionServiceCollectionExtensions
static Microsoft.AspNetCore.Builder.SessionMiddlewareExtensions.UseSession(this Microsoft.AspNetCore.Builder.IApplicationBuilder! app) -> Microsoft.AspNetCore.Builder.IApplicationBuilder!
static Microsoft.AspNetCore.Builder.SessionMiddlewareExtensions.UseSession(this Microsoft.AspNetCore.Builder.IApplicationBuilder! app, Microsoft.AspNetCore.Builder.SessionOptions! options) -> Microsoft.AspNetCore.Builder.IApplicationBuilder!
static Microsoft.Extensions.DependencyInjection.SessionServiceCollectionExtensions.AddSession(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static Microsoft.Extensions.DependencyInjection.SessionServiceCollectionExtensions.AddSession(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, System.Action<Microsoft.AspNetCore.Builder.SessionOptions!>! configure) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static readonly Microsoft.AspNetCore.Session.SessionDefaults.CookieName -> string!
static readonly Microsoft.AspNetCore.Session.SessionDefaults.CookiePath -> string!
