<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Common_CannotBeLessThanZero" xml:space="preserve">
    <value>The parameter cannot be less than 0.</value>
  </data>
  <data name="Common_CannotBeNullOrEmpty" xml:space="preserve">
    <value>The parameter cannot be null or empty.</value>
  </data>
  <data name="Common_CannotGetNextIterationName" xml:space="preserve">
    <value>Cannot get free name for {0}(1),(2),... in directory {1}. Please clean up this directory.</value>
  </data>
  <data name="Common_DeploymentItem" xml:space="preserve">
    <value>deployment item '{0}'</value>
  </data>
  <data name="Common_DeploymentItemWithOutputDirectory" xml:space="preserve">
    <value>deployment item '{0}' (output directory '{1}')</value>
  </data>
  <data name="Common_MissingRunConfigInRun" xml:space="preserve">
    <value>Test Settings are not specified.</value>
  </data>
  <data name="Common_MissingRunDeploymentRootInRunConfig" xml:space="preserve">
    <value>The active Test Settings do not define the Run Deployment Directory.</value>
  </data>
  <data name="Common_MissingRunInResult" xml:space="preserve">
    <value>The result is not associated with a test run. Use a result that was obtained from an in-progress or completed test run.</value>
  </data>
  <data name="Common_NothingLeftAfterReplaciingBadCharsInName" xml:space="preserve">
    <value>The specified file/directory name '{0}' is not valid.</value>
  </data>
  <data name="Common_NullInMessages" xml:space="preserve">
    <value>(null)</value>
  </data>
  <data name="Common_TestRunName" xml:space="preserve">
    <value>{0}@{1} {2}</value>
  </data>
  <data name="FailureToAttach" xml:space="preserve">
    <value>Failed to attach files from: {0}
Error Details: {1}:{2}</value>
  </data>
  <data name="MessageForSkippedTests" xml:space="preserve">
    <value>Test '{0}' was skipped in the test run.</value>
  </data>
  <data name="TestOutcomeAborted" xml:space="preserve">
    <value>Aborted</value>
  </data>
  <data name="TestOutcomeCompleted" xml:space="preserve">
    <value>Completed</value>
  </data>
  <data name="TestOutcomeDisconnected" xml:space="preserve">
    <value>Disconnected</value>
  </data>
  <data name="TestOutcomeError" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="TestOutcomeFailed" xml:space="preserve">
    <value>Failed</value>
  </data>
  <data name="TestOutcomeInconclusive" xml:space="preserve">
    <value>Inconclusive</value>
  </data>
  <data name="TestOutcomeInProgress" xml:space="preserve">
    <value>In Progress</value>
  </data>
  <data name="TestOutcomeNotExecuted" xml:space="preserve">
    <value>Not Executed</value>
  </data>
  <data name="TestOutcomeNotRunnable" xml:space="preserve">
    <value>Not Runnable</value>
  </data>
  <data name="TestOutcomePassed" xml:space="preserve">
    <value>Passed</value>
  </data>
  <data name="TestOutcomePassedButRunAborted" xml:space="preserve">
    <value>Passed (run aborted)</value>
  </data>
  <data name="TestOutcomePending" xml:space="preserve">
    <value>Pending</value>
  </data>
  <data name="TestOutcomeTimeout" xml:space="preserve">
    <value>Timeout</value>
  </data>
  <data name="TestOutcomeWarning" xml:space="preserve">
    <value>Warning</value>
  </data>
  <data name="TrxLoggerResultsFile" xml:space="preserve">
    <value>Results File: {0}</value>
  </data>
  <data name="TS_AllResults" xml:space="preserve">
    <value>All Loaded Results</value>
  </data>
  <data name="TS_UncategorizedResults" xml:space="preserve">
    <value>Results Not in a List</value>
  </data>
  <data name="TrxLoggerResultsFileOverwriteWarning" xml:space="preserve">
    <value>WARNING: Overwriting results file: {0}</value>
  </data>
  <data name="PrefixAndNameProvidedError" xml:space="preserve">
    <value>The parameters LogFileName and LogFilePrefix cannot be used together. </value>
  </data>
  <data name="Common_CannotGetNextTimestampFileName" xml:space="preserve">
    <value>Cannot get find an available filename for {0} using timestamp format '{2}' at {1}.</value>
  </data>
</root>