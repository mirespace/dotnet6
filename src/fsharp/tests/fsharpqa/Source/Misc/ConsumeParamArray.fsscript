// #Regression #Misc 
#light

// Test that F# can consume C# param arrays.  (Can't use variable number of arguments, rather
// arguments will just be exposed as taking an array.)
// FSB 1105, params attributes not supported
// This is also regression test for FSHARP1.0:3817
open System

#r "ParamArray.dll"
open CSharpAssembly

// Apply the attribute
[<AttributeWithParamArray([| (0 :> obj) |])>]
type Foo() =
    [<AttributeWithParamArray([| ("foo" :> obj); ("bar" :> obj) |])>]
    override this.ToString() = "Stuff"

let callCSGenericMethod (a: 't[]) = CSParamArray.Method(a)

[<assembly:AttributeWithParamArray ([| |])>]
do
    let getTestAttribute (t : Type) =
        let tyAttributes = t.GetCustomAttributes(false)
        let attrib = tyAttributes |> Array.find (fun attrib -> match attrib with :? AttributeWithParamArray -> true | _ -> false)
        (attrib :?> AttributeWithParamArray)
    
    let tyFoo = typeof<Foo>
    let testAtt = getTestAttribute tyFoo
    if testAtt.Parameters <> [| (0 :> obj) |] then
        printfn "Attribute parameters not as expected"
        exit 1    
    
    let directCallWorks =
        CSParamArray.Method(9, 8, 7) + CSParamArray.Method(1, 2) + CSParamArray.Method() = (9 + 8 + 7) + (1 + 2)
    if not directCallWorks then
        printfn "Calling C# param array method gave unexpected result"
        exit 1

    let callParamArray (x : int array) = CSParamArray.Method(x)
    let asArrayCallWorks = (callParamArray [| 9; 8; 7 |]) = (9 + 8 + 7)
    if not asArrayCallWorks then
        printfn "Calling C# param array method, passing args as an array, gave unexpected result"
        exit 1

    if callCSGenericMethod [|"1";"2";"3"|] <> 3 then
        printfn "Calling C# generic param array method gave unexpected result"
        exit 1

    if CSParamArray.Method("1", "2", "3") <> CSParamArray.Method([|"1"; "2"; "3"|]) then
        printfn "Calling C# generic param array in normal and expanded method gave unexpected result"
        exit 1

    exit 0
    
    